{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/Legacy/DetectColl.ts"],"names":["_decorator","Component","Contact2DType","PhysicsSystem2D","PolygonCollider2D","ccclass","property","DetectColl","start","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","PRE_SOLVE","onPreSolve","POST_SOLVE","onPostSolve","instance","selfCollider","otherCollider","contact","console","log"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAkCC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,a,OAAAA,a;AAAwCC,MAAAA,e,OAAAA,e;AAAiBC,MAAAA,iB,OAAAA,iB;;;;;;;;;OACzG;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;4BAGjBO,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCN,SADhC,CAC0C;AAGtCO,QAAAA,KAAK,GAAI;AACL;AACA,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBN,iBAAlB,CAAf;;AACA,cAAIK,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAYT,aAAa,CAACU,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D;AACAJ,YAAAA,QAAQ,CAACE,EAAT,CAAYT,aAAa,CAACY,WAA1B,EAAuC,KAAKC,YAA5C,EAA0D,IAA1D;AACAN,YAAAA,QAAQ,CAACE,EAAT,CAAYT,aAAa,CAACc,SAA1B,EAAqC,KAAKC,UAA1C,EAAsD,IAAtD;AACAR,YAAAA,QAAQ,CAACE,EAAT,CAAYT,aAAa,CAACgB,UAA1B,EAAsC,KAAKC,WAA3C,EAAwD,IAAxD;AACH,WARI,CAUL;;;AACA,cAAIhB,eAAe,CAACiB,QAApB,EAA8B;AAC1BjB,YAAAA,eAAe,CAACiB,QAAhB,CAAyBT,EAAzB,CAA4BT,aAAa,CAACU,aAA1C,EAAyD,KAAKC,cAA9D,EAA8E,IAA9E;AACAV,YAAAA,eAAe,CAACiB,QAAhB,CAAyBT,EAAzB,CAA4BT,aAAa,CAACY,WAA1C,EAAuD,KAAKC,YAA5D,EAA0E,IAA1E;AACAZ,YAAAA,eAAe,CAACiB,QAAhB,CAAyBT,EAAzB,CAA4BT,aAAa,CAACc,SAA1C,EAAqD,KAAKC,UAA1D,EAAsE,IAAtE;AACAd,YAAAA,eAAe,CAACiB,QAAhB,CAAyBT,EAAzB,CAA4BT,aAAa,CAACgB,UAA1C,EAAsD,KAAKC,WAA3D,EAAwE,IAAxE;AACH;AACJ;;AACDN,QAAAA,cAAc,CAAEQ,YAAF,EAA4BC,aAA5B,EAAuDC,OAAvD,EAA0F;AACpG;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;;AACDV,QAAAA,YAAY,CAAEM,YAAF,EAA4BC,aAA5B,EAAuDC,OAAvD,EAA0F;AAClG;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;;AACDR,QAAAA,UAAU,CAAEI,YAAF,EAA4BC,aAA5B,EAAuDC,OAAvD,EAA0F;AAChG;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AACDN,QAAAA,WAAW,CAAEE,YAAF,EAA4BC,aAA5B,EAAuDC,OAAvD,EAA0F;AACjG;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH;;AApCqC,O","sourcesContent":["import { _decorator, Collider, Collider2D, Component, Contact2DType, IPhysics2DContact, Node, PhysicsSystem2D, PolygonCollider2D } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('DetectColl')\r\nexport class DetectColl extends Component {\r\n  \r\n\r\n    start () {\r\n        // Registering callback functions for a single collider\r\n        let collider = this.getComponent(PolygonCollider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n            collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n        }\r\n\r\n        // Registering global contact callback functions\r\n        if (PhysicsSystem2D.instance) {\r\n            PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            PhysicsSystem2D.instance.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            PhysicsSystem2D.instance.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n            PhysicsSystem2D.instance.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n        }\r\n    }\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // will be called once when two colliders begin to contact\r\n        console.log('onBeginContact');\r\n    }\r\n    onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // will be called once when the contact between two colliders just about to end.\r\n        console.log('onEndContact');\r\n    }\r\n    onPreSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // will be called every time collider contact should be resolved\r\n        console.log('onPreSolve');\r\n    }\r\n    onPostSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // will be called every time collider contact should be resolved\r\n        console.log('onPostSolve');\r\n    }\r\n    \r\n \r\n}\r\n\r\n\r\n"]}
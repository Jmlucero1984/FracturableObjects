{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/FracturableAssembler.ts"],"names":["Point2","_decorator","Graphics","Vec2","Color","UIVertexFormat","gfx","warnID","director","RenderingSubMesh","Vec3","v2","Texture2D","Material","math","earcut","calculateEnvolArea","ccclass","property","attributes2","vfmtPosColor","concat","Attribute","Format","R32F","componentPerVertex2","getComponentPerVertex","stride2","getAttributeStride","constructor","x","y","dx","dy","dmx","dmy","flags","len","lineLength","reset","attrBytes2","_impl","MAX_VERTEX","MAX_INDICES","PI","Math","min","max","ceil","acos","cos","sin","atan2","_tempV2","_renderData","_curColor","vec3_temps","i","push","indexStart","lineC","polygonPoints","textureWidth","textureHeight","meshWidth","uv_unit","area","calculateDistances","points","sum","res","vector_a","vector_b","_distances","index","length","dist","pushInto","receiver","newData","copyWithin","isInTriangle","point","triA","triB","triC","AB","subtract","AC","BC","AD","BD","cross","splitPolygon","pointMap","p","getIdx","idxs","p1","p2","p3","splitPoint","v1","hasPoint","splice","computeUv","width","height","uvs","clamp","FracturableAssembler","group","type","onLoad","baseTexture","console","log","Render_Mat","setMaterial","getSharedMaterial","setProperty","polygon","modifyPoints","clear","stroke","getArea","setPoints","onEnable","onDestroy","start","_flushAssembler","assembler","Assembler","getAssembler","superGraphicsAssembler","kk","graphics","impl","_expandStroke","updatePathOffset","end","meshBuffer","getRenderData","my_i_data","my_v_data","theUvs","initIndex","earcutData","j","vDataOffset","newIndices","indexes","_iSet","_vSet","vertexCount","renderDataList","getRenderDataList","renderData","dataOffset","maxVertexCount","vertexStart","requestRenderData","request","iData","distance","lineLong","vData","toArray","WHITE","_assembler","activeSubModel","idx","model","node","name","subModels","gfxDevice","root","device","vertexBuffer","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","indexBuffer","INDEX","Uint16Array","BYTES_PER_ELEMENT","renderMesh","PrimitiveMode","TRIANGLE_LIST","subMeshIdx","getMaterialInstance","initSubModel","_uploadData","subModelList","ia","inputAssembler","lastFilledVertex","vb","Float32Array","buffer","vertexBuffers","update","ib","indexCount","lastFilledIndex","_isNeedUploadData"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Graphics, Vec2, Color, __private, UIVertexFormat, gfx, warnID, director, RenderingSubMesh, Vec3, v2, Texture2D, Size, size, Material, MeshRenderData,  math } from 'cc';\r\nimport { earcut } from './earcut';\r\nimport { calculateEnvolArea } from './MaskSplitter';\r\n \r\n\r\nconst { ccclass, property } = _decorator;\r\n \r\n\r\n\r\nconst attributes2 = UIVertexFormat.vfmtPosColor.concat([\r\n    new gfx.Attribute('a_dist', gfx.Format.R32F),\r\n    new gfx.Attribute('a_line', gfx.Format.R32F),\r\n]);\r\n\r\nconst componentPerVertex2 = UIVertexFormat.getComponentPerVertex(attributes2);\r\n\r\nconst stride2 = UIVertexFormat.getAttributeStride(attributes2);\r\n\r\nclass Point2 extends Vec2 {\r\n    public dx = 0;\r\n    public dy = 0;\r\n    public dmx = 0;\r\n    public dmy = 0;\r\n    public flags = 0;\r\n    public len = 0;\r\n    public lineLength = 0;\r\n    constructor(x: number, y: number) {\r\n        super(x, y);\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.dmx = 0;\r\n        this.dmy = 0;\r\n        this.flags = 0;\r\n        this.len = 0;\r\n        this.lineLength = 0;\r\n    }\r\n}\r\n\r\n\r\nconst attrBytes2 = 9;\r\nlet _impl: __private._cocos_2d_assembler_graphics_webgl_impl__Impl | null = null;\r\n\r\nconst MAX_VERTEX = 65535;\r\nconst MAX_INDICES = MAX_VERTEX * 2;\r\n\r\nconst PI = Math.PI;\r\nconst min = Math.min;\r\nconst max = Math.max;\r\nconst ceil = Math.ceil;\r\nconst acos = Math.acos;\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\nconst atan2 = Math.atan2;\r\nconst _tempV2 = v2();\r\n\r\n\r\nlet _renderData: MeshRenderData | null = null;\r\nconst _curColor = new Color();\r\n\r\nconst vec3_temps: Vec3[] = [];\r\nfor (let i = 0; i < 4; i++) {\r\n    vec3_temps.push(new Vec3());\r\n}\r\n\r\nlet indexStart:number =0;\r\nlet lineC: number = 1;\r\nlet polygonPoints: Vec2[] = [];\r\nlet textureWidth:number=0;\r\nlet textureHeight:number=0;\r\nlet meshWidth:number=0;\r\nlet uv_unit:boolean=false;\r\nlet area:number=0;\r\n\r\nconst calculateDistances = function(points:Vec2[]):number[] {\r\n    let sum=0;\r\n    const res=function (vector_a:Vec2,vector_b:Vec2){\r\n        return  v2(vector_a.x-vector_b.x,vector_a.y-vector_b.y);\r\n    }\r\n    let _distances:number[]=[];\r\n    for (let index = 0; index < points.length-1; index++) {\r\n        let dist=res(points[index+1], points[index]).length()\r\n         _distances.push(dist)\r\n         sum+=dist;  \r\n    }\r\n    _distances.push(sum);\r\n    return _distances;\r\n}\r\n\r\nconst pushInto = function (receiver:any, newData:any[]) {\r\n    for (let index = 0; index < newData.length; index++) {\r\n        receiver.copyWithin\r\n        receiver.push(newData[index]); \r\n    }\r\n}\r\nconst isInTriangle = function (point: Vec2, triA: Vec2, triB: Vec2, triC: Vec2) {\r\n  //  console.log(\"Helper - Is in triangle\")\r\n    let AB: Vec2 = new Vec2();\r\n    Vec2.subtract(AB, triB, triA);\r\n\r\n    let AC: Vec2 = new Vec2();\r\n    Vec2.subtract(AC, triC, triA);\r\n\r\n    let BC: Vec2 = new Vec2();\r\n    Vec2.subtract(BC, triC, triB);\r\n\r\n    let AD: Vec2 = new Vec2();\r\n    Vec2.subtract(AD, point, triA);\r\n\r\n    let BD: Vec2 = new Vec2();\r\n    Vec2.subtract(BD, point, triB);\r\n\r\n    //@ts-ignore\r\n    return (AB.cross(AC) >= 0 ^ AB.cross(AD) < 0) && (AB.cross(AC) >= 0 ^ AC.cross(AD) >= 0) && (BC.cross(AB) > 0 ^ BC.cross(BD) >= 0);\r\n}\r\n\r\nconst splitPolygon = function (points: Vec2[]): number[] {\r\n    // console.log(\"Helper - Split poligon\") // Lo llama continuamente...\r\n     if (points.length <= 3) return [0, 1, 2];\r\n     let pointMap: { [key: string]: number } = {};     // The mapping between point and idx\r\n     for (let i = 0; i < points.length; i++) {\r\n         let p = points[i];\r\n         pointMap[`${p.x}-${p.y}`] = i;\r\n     }\r\n     const getIdx = (p: Vec2) => {\r\n         return pointMap[`${p.x}-${p.y}`]\r\n     }\r\n     points = points.concat([]);\r\n     let idxs: number[] = [];\r\n \r\n     let index = 0;\r\n     while (points.length > 3) {\r\n         let p1 = points[(index) % points.length]\r\n             , p2 = points[(index + 1) % points.length]\r\n             , p3 = points[(index + 2) % points.length];\r\n         let splitPoint = (index + 1) % points.length;\r\n \r\n         let v1: Vec2 = new Vec2();\r\n         Vec2.subtract(v1, p2, p1);\r\n         let v2: Vec2 = new Vec2();\r\n         Vec2.subtract(v2, p3, p2);\r\n \r\n         if (v1.cross(v2) < 0) {      // is a concave corner, look for the next\r\n             index = (index + 1) % points.length;\r\n             continue;\r\n         }\r\n         let hasPoint = false;\r\n         for (const p of points) {\r\n             if (p != p1 && p != p2 && p != p3 && isInTriangle(p, p1, p2, p3)) {\r\n                 hasPoint = true;\r\n                 break;\r\n             }\r\n         }\r\n         if (hasPoint) {      // The current triangle contains other points, find the next\r\n             index = (index + 1) % points.length;\r\n             continue;\r\n         }\r\n         // Found the ear, cut it off\r\n         idxs.push(getIdx(p1), getIdx(p2), getIdx(p3));\r\n         points.splice(splitPoint, 1);\r\n     }\r\n     for (const p of points) {\r\n         idxs.push(getIdx(p));\r\n     }\r\n     return idxs;\r\n }\r\n\r\n const computeUv = function (points: Vec2[], width: number, height: number) {\r\n    //console.log(\"Helper - compute uv\")\r\n    let uvs: Vec2[] = [];\r\n    for (const p of points) {\r\n        // The uv origin is the upper left corner\r\n        let x = math.clamp(0, 1, (p.x + width / 2) / width);\r\n        let y = math.clamp(0, 1, 1. - (p.y + height / 2) / height);\r\n        uvs.push(v2(x, y));\r\n    }\r\n    return uvs;\r\n}\r\n\r\n\r\n \r\n\r\n@ccclass('FracturableAssembler')\r\nexport class FracturableAssembler extends Graphics {\r\n    @property({ group:\"Render\" })\r\n    @property(Texture2D)\r\n    baseTexture: Texture2D = null;\r\n    @property({ group:\"Render\" })\r\n    @property(Material)\r\n    Render_Mat: Material = null;\r\n    @property({ type: [Vec2]})\r\n    polygon: Vec2[] = [];\r\n\r\n     \r\n \r\n\r\n\r\n    onLoad() { \r\n        if (this.baseTexture) {\r\n            textureWidth = this.baseTexture.width;\r\n            textureHeight= this.baseTexture.height;\r\n            console.log(\"TEX WIDTH: \"+textureWidth)\r\n            console.log(\"TEX HEIGTH: \"+textureHeight)\r\n           \r\n        }\r\n        if (this.Render_Mat) {\r\n            this.setMaterial(this.Render_Mat, 0);\r\n            if (this.baseTexture)\r\n                this.getSharedMaterial(0).setProperty(\"texture1\", this.baseTexture);\r\n        } \r\n        polygonPoints=this.polygon;\r\n        \r\n        super.onLoad();\r\n    }\r\n\r\n\r\n    modifyPoints(){\r\n      //  console.log(\"MODIFFFY\")\r\n\r\n        \r\n       this.clear();\r\n       polygonPoints=this.polygon;\r\n       this.stroke();\r\n        \r\n    }\r\n\r\n    getArea() {\r\n        return area;\r\n    }\r\n    \r\n    setPoints(points:Vec2[]){\r\n        polygonPoints=points;\r\n    }\r\n    onEnable() {\r\n        if (this.Render_Mat) {\r\n            this.setMaterial(this.Render_Mat, 0);\r\n            if (this.baseTexture)\r\n                this.getSharedMaterial(0).setProperty(\"texture1\", this.baseTexture);\r\n        } \r\n    }\r\n    onDestroy() {\r\n\r\n    };\r\n\r\n    start() {\r\n\r\n    }\r\n \r\n \r\n\r\n\r\n    /**\r\n     * initialization assembler render data assembler\r\n     */\r\n    protected _flushAssembler() {\r\n        const assembler = Graphics.Assembler!.getAssembler(this);\r\n        let superGraphicsAssembler: any = {};\r\n        for (let kk in assembler) {\r\n            superGraphicsAssembler[kk] = assembler[kk];\r\n        }\r\n\r\n\r\n        superGraphicsAssembler.stroke = function (graphics: Graphics) {\r\n         // console.log(\"STROKE CALLED\")\r\n        ///  console.log(polygonPoints)\r\n            if (!graphics.impl) { return; }\r\n            this._expandStroke!(graphics);\r\n            graphics.impl.updatePathOffset = true;\r\n            this.end(graphics);\r\n        };\r\n\r\n  \r\n       \r\n \r\n        superGraphicsAssembler._expandStroke = function (graphics: Graphics) {\r\n            let indexStart:number =0;\r\n   \r\n            _impl = graphics.impl;\r\n            if (!_impl) { return; }\r\n\r\n            const meshBuffer: MeshRenderData | null = _renderData = this.getRenderData!(graphics,300);\r\n            if (!meshBuffer) {return;  }\r\n\r\n\r\n        \r\n           let my_i_data:number[]=[];\r\n            let my_v_data:Float32List=[];\r\n            if(true) {\r\n             //   console.log(\"POINTS\")\r\n             //   console.log(polygonPoints)\r\n                let theUvs=computeUv(polygonPoints,textureWidth,textureHeight);\r\n              //  console.log(theUvs)\r\n          \r\n                for (let index =0; index < polygonPoints.length; index++) {\r\n             \r\n            \r\n                    pushInto(my_v_data, [polygonPoints[index].x,polygonPoints[index].y,0,1,1,1,1,theUvs[index].x,theUvs[index].y]);\r\n                   \r\n                \r\n            \r\n                }\r\n                let initIndex=0;\r\n              //  console.log(\"preindex\")\r\n\r\n\r\n             // let indexes=splitPolygon(polygonPoints);\r\n \r\n\r\n                const earcutData: number[] = [ ];\r\n                console.log(\"CANT DE VERTEXX: \"+my_v_data.length)\r\n                console.log(\"VDATA: \"+my_v_data)\r\n            for (let j =0;j<my_v_data.length/9; j++) {\r\n                    let vDataOffset = j * attrBytes2;\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                }  \r\n  \r\n               \r\n                console.log(\"EARCUT DATA: \"+earcutData)\r\n        \r\n\r\n                const newIndices =   earcut(earcutData,null, 3);\r\n                console.log(\"INDICES\")\r\n                console.log(newIndices)\r\n                let indexes = newIndices\r\n\r\n                area=calculateEnvolArea(indexes,earcutData,3);\r\n                console.log(\"Calculated Area: \" + area)\r\n \r\n           \r\n\r\n\r\n          \r\n                for (let index = 0; index <indexes.length; index+=3) {\r\n        \r\n            \r\n                 pushInto(my_i_data, [indexes[index],indexes[index+1],indexes[index+2]])\r\n                  \r\n                    \r\n                 } \r\n              \r\n            }  \r\n        \r\n                \r\n            for (let index = 0; index < my_i_data.length; index++) {\r\n                this._iSet(my_i_data[index])       \r\n             }\r\n             \r\n       \r\n            for (let index = 0; index < my_v_data.length; index+=9) {\r\n                this._vSet(my_v_data[index],my_v_data[index+1],my_v_data[index+7],my_v_data[index+8])    \r\n             }\r\n       \r\n            _renderData = null;\r\n           _impl = null;\r\n        }; \r\n        \r\n        \r\n        //**get a render data */\r\n        superGraphicsAssembler.getRenderData = function (graphics: Graphics, vertexCount: number): MeshRenderData {\r\n \r\n            if (!_impl) {\r\n                return null;\r\n            }\r\n            const renderDataList = _impl.getRenderDataList();\r\n            let renderData = renderDataList[_impl.dataOffset];\r\n            if (!renderData) {\r\n                return null;\r\n            }\r\n\r\n            let meshBuffer = renderData;\r\n            const maxVertexCount = meshBuffer ? meshBuffer.vertexStart + vertexCount : 0;\r\n            if (maxVertexCount > MAX_VERTEX || maxVertexCount * 3 > MAX_INDICES) {\r\n                ++_impl.dataOffset;\r\n\r\n                if (_impl.dataOffset < renderDataList.length) {\r\n                    renderData = renderDataList[_impl.dataOffset];\r\n                } else {\r\n                    renderData = _impl.requestRenderData();\r\n                    renderDataList[_impl.dataOffset] = renderData;\r\n                }\r\n                meshBuffer = renderData;\r\n            }\r\n\r\n            if (meshBuffer && meshBuffer.vertexCount < maxVertexCount) {\r\n                meshBuffer.request(vertexCount, vertexCount * 3);\r\n            }\r\n            return renderData;\r\n        };\r\n        \r\n        superGraphicsAssembler._iSet = function (i: number) {\r\n            if (!_renderData) {\r\n                return;\r\n            }\r\n            const meshBuffer = _renderData;\r\n           // let dataOffset = meshBuffer.vertexStart * attrBytes2;\r\n            const iData = meshBuffer.iData;\r\n            iData[ meshBuffer.indexStart] = i;\r\n            meshBuffer.indexStart++;\r\n        }\r\n            /**set vertex data */\r\n            superGraphicsAssembler._vSet = function (x: number, y: number, distance = 0, lineLong = 0) {\r\n                if (!_renderData) {\r\n                    return;\r\n                }\r\n                const meshBuffer = _renderData;\r\n                let dataOffset = meshBuffer.vertexStart * attrBytes2;\r\n                const vData = meshBuffer.vData;\r\n                vData[dataOffset++] = x;\r\n                vData[dataOffset++] = y;\r\n                vData[dataOffset++] = 0;\r\n                Color.toArray(vData, Color.WHITE, dataOffset);\r\n                dataOffset += 4;\r\n                vData[dataOffset++] = distance;\r\n                vData[dataOffset++] = lineLong;\r\n                meshBuffer.vertexStart++;\r\n            }\r\n\r\n        if (this._assembler !== superGraphicsAssembler) {\r\n            this._assembler = superGraphicsAssembler;\r\n        }\r\n    }\r\n\r\n    /**Create vertex databuffer */\r\n    public activeSubModel(idx: number) {\r\n        if (!this.model) {\r\n            warnID(4500, this.node.name);\r\n            return;\r\n        }\r\n\r\n        if (this.model.subModels.length <= idx) {\r\n            const gfxDevice: gfx.Device = director.root.device;\r\n            const vertexBuffer = gfxDevice.createBuffer(new gfx.BufferInfo(\r\n                gfx.BufferUsageBit.VERTEX | gfx.BufferUsageBit.TRANSFER_DST,\r\n                gfx.MemoryUsageBit.DEVICE,\r\n                65535 * stride2,\r\n                stride2,\r\n            ));\r\n            const indexBuffer = gfxDevice.createBuffer(new gfx.BufferInfo(\r\n                gfx.BufferUsageBit.INDEX | gfx.BufferUsageBit.TRANSFER_DST,\r\n                gfx.MemoryUsageBit.DEVICE,\r\n                65535 * Uint16Array.BYTES_PER_ELEMENT * 2,\r\n                Uint16Array.BYTES_PER_ELEMENT,\r\n            ));\r\n            const renderMesh = new RenderingSubMesh([vertexBuffer], attributes2, gfx.PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n            renderMesh.subMeshIdx = 0;\r\n            if (this.getMaterialInstance(0)) {\r\n                this.model.initSubModel(idx, renderMesh, this.getMaterialInstance(0)!);\r\n            }\r\n            this[\"_graphicsUseSubMeshes\"].push(renderMesh);\r\n        }\r\n    }\r\n    /**Refresh the rendering data */\r\n    protected _uploadData() {\r\n        const impl = this.impl;\r\n        if (!impl) {\r\n            return;\r\n        }\r\n\r\n        const renderDataList = impl && impl.getRenderDataList();\r\n        if (renderDataList.length <= 0 || !this.model) {\r\n            return;\r\n        }\r\n\r\n        const subModelList = this.model.subModels;\r\n        for (let i = 0; i < renderDataList.length; i++) {\r\n            const renderData = renderDataList[i];\r\n            const ia = subModelList[i].inputAssembler;\r\n            if (renderData.lastFilledVertex === renderData.vertexStart) { continue; }\r\n            const vb = new Float32Array(renderData.vData.buffer, 0, renderData.vertexStart * componentPerVertex2);\r\n            ia.vertexBuffers[0].update(vb);\r\n            ia.vertexCount = renderData.vertexStart;\r\n            const ib = new Uint16Array(renderData.iData.buffer, 0, renderData.indexStart);\r\n            ia.indexBuffer!.update(ib);\r\n            ia.indexCount = renderData.indexStart;\r\n            renderData.lastFilledVertex = renderData.vertexStart;\r\n            renderData.lastFilledIndex = renderData.indexStart;\r\n        }\r\n        this._isNeedUploadData = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]}
{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/MaskSplitter.ts"],"names":["Fracture","ab_cross_ac","a","b","c","cross","x","y","check","part","sum","j","length","v1","Vec2","subtract","v2","rnd","Math","round","polygonToString","polygon","output","i","calculateCenterMass","poly","sumx","sumy","cant","forEach","element","dot","x1","y1","x2","y2","dblcmp","abs","reorientate","reorientated","push","isInPolygon","checkPoint","polygonPoints","counter","xinters","p1","p2","pointCount","min","max","invertVector","vec","randomSign","random","findExtremePoints","fracture","initPoint","getContactPoint","envol","getEnvolvent","points","direction","getNormal","beforeExtendedPoint","beyondExtendedPoint","lineCrossPoint","v3","equals","proxPt","getInterpolated","Vec3","reord","sort","lengthVector3","z","setPointA","setPointB","setExtremePoints","percent","difx","dify","lengthVector","sqrt","pow","pivot","outPoints","Infinity","index","minV","splice","normalizeVector","dist","getFracturable","centerMass","iPoint","vectorToCenter","extremePoints","getExtremePoints","console","log","getPointA","getPointB","temp","tt","setFracturePts","lineCutPolygon","fractObj","ret","pointIndex","indexBeforeFractureA","indexBeforeFractureB","originalFracture","getFracturePts","partA","partB","point_on_line","calculateEnvolArea","indexes","coords","jump","area","triangleArea","calcAproxArea","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","e","q1","q2","d","s1","s2","s3","s4","d1","d2","d3","d4","p","_decorator","ccclass","property","constructor","ctPt","normal","envd","contactPoint","pointA","pointB","fracturePoints","envolvent","extPts","ptA","ptB","fctPts"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, v2, v3, Vec2, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nfunction ab_cross_ac(a, b, c) //The cross product of ab and ac\r\n{\r\n    return cross(b.x - a.x, b.y - a.y, c.x - a.x, c.y - a.y);\r\n}\r\nfunction check(part: Vec2[]) {\r\n    // console.log(\"CHECKING\")\r\n    let sum = 0;\r\n    for (let j = 0; j < part.length; ++j) {\r\n        let a = part[j % part.length];\r\n        let b = part[(j + 1) % part.length];\r\n        let c = part[(j + 2) % part.length];\r\n        let v1: Vec2 = new Vec2();\r\n        Vec2.subtract(v1, a, b);\r\n        let v2: Vec2 = new Vec2();\r\n        Vec2.subtract(v2, b, c);\r\n        sum += v1.cross(v2);\r\n\r\n    }\r\n    //  console.log(\"La suma dio \" + sum)\r\n    return sum > 0;\r\n}\r\nfunction rnd(x: number) {\r\n    return Math.round(x * 1000) / 1000;\r\n}\r\n\r\nexport function polygonToString(polygon: Vec2[]) {\r\n    let output: string = \"this.gr.moveTo(\" + rnd(polygon[0].x) + \",\" + rnd(polygon[0].y) + \");\"\r\n    for (let i = 1; i < polygon.length; i++) {\r\n        output += \"this.gr.lineTo(\" + rnd(polygon[i].x) + \",\" + rnd(polygon[i].y) + \");\"\r\n    }\r\n    output += \"this.gr.close();\"\r\n    //console.log(output)\r\n\r\n}\r\n\r\n\r\nfunction calculateCenterMass(poly: Vec2[]) {\r\n    let sumx = 0;\r\n    let sumy = 0;\r\n    let cant = poly.length;\r\n\r\n    poly.forEach(element => {\r\n        sumx += element.x;\r\n        sumy += element.y;\r\n    });\r\n    return new Vec2(sumx / cant, sumy / cant);\r\n}\r\nfunction dot(x1, y1, x2, y2) {\r\n    return x1 * x2 + y1 * y2;\r\n}\r\nfunction cross(x1, y1, x2, y2) {\r\n    return x1 * y2 - x2 * y1;\r\n}\r\nfunction dblcmp(a: number, b: number) {\r\n    if (Math.abs(a - b) <= 0.0001) return 0;\r\n    if (a > b) return 1;\r\n    else return -1;\r\n}\r\n\r\nfunction reorientate(poly: Vec2[]) {\r\n    let reorientated: Vec2[] = [];\r\n    for (let i = poly.length - 1; i >= 0; i--) {\r\n        reorientated.push(poly[i])\r\n    }\r\n    return reorientated;\r\n}\r\n\r\nexport function isInPolygon(checkPoint: Vec2, polygonPoints: Vec2[]) {\r\n    var counter = 0;\r\n    var i: number;\r\n    var xinters;\r\n    var p1: Vec2, p2: Vec2;\r\n    var pointCount = polygonPoints.length;\r\n    p1 = polygonPoints[0];\r\n    for (i = 1; i <= pointCount; i++) {\r\n        p2 = polygonPoints[i % pointCount];\r\n        if (checkPoint.x > Math.min(p1.x, p2.x) && checkPoint.x <= Math.max(p1.x, p2.x)) {\r\n            if (checkPoint.y <= Math.max(p1.y, p2.y)) {\r\n                if (p1.x != p2.x) {\r\n                    xinters = (checkPoint.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;\r\n                    if (p1.y == p2.y || checkPoint.y <= xinters) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        p1 = p2;\r\n    }\r\n    if (counter % 2 == 0) { return false; }\r\n    return true;\r\n}\r\nexport class Fracture {\r\n    contactPoint: Vec2;\r\n    normal: Vec2;\r\n    pointA: number;\r\n    pointB: number;\r\n    fracturePoints: Vec2[];\r\n    envolvent: Vec2[];\r\n    extremePoints: Vec2[];\r\n    public constructor(ctPt: Vec2, normal: Vec2, envd: Vec2[]) {\r\n        this.contactPoint = ctPt;\r\n        this.normal = normal;\r\n        this.envolvent = envd;\r\n    }\r\n\r\n    public getPointA() { return this.pointA; }\r\n    public getExtremePoints() { return this.extremePoints; }\r\n    public setExtremePoints(extPts: Vec2[]) { this.extremePoints = extPts; }\r\n    public getPointB() { return this.pointB; }\r\n    public getNormal() { return this.normal; }\r\n    public getContactPoint() { return this.contactPoint; }\r\n\r\n    public getFracturePts() { return this.fracturePoints; }\r\n\r\n    public getEnvolvent() { return this.envolvent; }\r\n    public setPointA(ptA: number) { this.pointA = ptA; }\r\n    public setPointB(ptB: number) { this.pointB = ptB; }\r\n\r\n    public setFracturePts(fctPts: Vec2[]) {\r\n        this.fracturePoints = fctPts;\r\n    }\r\n}\r\n\r\nfunction invertVector(vec: Vec2) {\r\n    return new Vec2(-1 * vec.x, -1 * vec.y)\r\n}\r\n\r\nfunction randomSign() {\r\n    if (Math.random() > 0.5) { return 1; }\r\n    else {\r\n        return -1;\r\n    }\r\n}\r\n\r\nfunction findExtremePoints(fracture: Fracture) {\r\n    let initPoint = fracture.getContactPoint();\r\n    let envol = fracture.getEnvolvent();\r\n    let points: Vec3[] = [];\r\n    let direction = invertVector(fracture.getNormal());\r\n    if (Math.abs(direction.x) < 0.2) direction.x = 0.1 * randomSign();\r\n    if (Math.abs(direction.y) < 0.2) direction.y = 0.1 * randomSign();\r\n    let beforeExtendedPoint = new Vec2(initPoint.x * 1.5, initPoint.y * 1.5);\r\n    if (isInPolygon(beforeExtendedPoint, envol)) {\r\n        //   console.log(\"W A R N I N G: Inside Polygon\")\r\n        return null;\r\n    }\r\n    let beyondExtendedPoint = new Vec2(initPoint.x + direction.x * 1000, initPoint.y + direction.y * 1000);\r\n    for (let j = 0; j < envol.length; ++j) {\r\n        let a = envol[j];\r\n        let b = envol[0];\r\n        if (j < envol.length - 1) b = envol[j + 1];\r\n        let c = lineCrossPoint(beforeExtendedPoint, beyondExtendedPoint, a, b); // WARNING! CONCAVE SHAPES\r\n        if (c[0] == 0) {\r\n            points.push(v3(c[1].x, c[1].y, j));\r\n        }\r\n        else if (c[0] > 0) {\r\n            if ((c[1] as Vec2).equals(a)) {\r\n                let proxPt = getInterpolated(a, b, 0.15);\r\n                points.push(new Vec3(proxPt.x, proxPt.y, j))\r\n            } else if ((c[1] as Vec2).equals(b)) {\r\n                let proxPt = getInterpolated(a, b, 0.85);\r\n                points.push(new Vec3(proxPt.x, proxPt.y, j))\r\n            }\r\n        }\r\n    }\r\n\r\n    if (points.length < 2) return null;\r\n    let reord: Vec2[] = [];\r\n\r\n    points.sort((a, b) => lengthVector3(a, beforeExtendedPoint) - lengthVector3(b, beforeExtendedPoint));\r\n\r\n    if (points[0].z > points[1].z) {\r\n        fracture.setPointA(points[1].z)\r\n        fracture.setPointB(points[0].z)\r\n        fracture.setExtremePoints([new Vec2(points[1].x, points[1].y), new Vec2(points[0].x, points[0].y)])\r\n    } else {\r\n        fracture.setPointA(points[0].z)\r\n        fracture.setPointB(points[1].z)\r\n        fracture.setExtremePoints([new Vec2(points[0].x, points[0].y), new Vec2(points[1].x, points[1].y)])\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction getInterpolated(a: Vec2, b: Vec2, percent: number) {\r\n    let difx = b.x - a.x;\r\n    let dify = b.y - a.y;\r\n    return new Vec2(a.x + difx * percent, a.y + dify * percent);\r\n}\r\nfunction lengthVector(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n}\r\nfunction lengthVector3(a: Vec3, b: Vec2) {\r\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n}\r\n\r\nfunction sort(pivot: Vec2, points: Vec2[]) {\r\n    let outPoints: Vec2[] = [];\r\n    while (outPoints.length < 3) {\r\n        let min = Infinity;\r\n        let index;\r\n        let minV: Vec2;\r\n        for (let j = 0; j < points.length; j++) {\r\n            if (points[j] == null) continue;\r\n            let length = lengthVector(pivot, points[j]);\r\n            if (length < min) {\r\n                min = length;\r\n                index = j;\r\n                minV = points[j];\r\n            }\r\n        }\r\n        outPoints.push(minV)\r\n        points.splice(index, 1)\r\n    }\r\n    return outPoints;\r\n}\r\n\r\nfunction normalizeVector(vec: Vec2) {\r\n    let dist = lengthVector(new Vec2(0, 0), vec);\r\n    return new Vec2(vec.x / dist, vec.y / dist)\r\n}\r\n\r\n\r\nexport function getFracturable(fracture: Fracture) {\r\n\r\n    let envol = fracture.getEnvolvent();\r\n\r\n    let centerMass = calculateCenterMass(envol);\r\n    let iPoint = fracture.getContactPoint();\r\n    let vectorToCenter = new Vec2(centerMass.x - iPoint.x, centerMass.y - iPoint.y)\r\n\r\n    findExtremePoints(fracture)\r\n    let extremePoints = fracture.getExtremePoints();\r\n    if (extremePoints == null) {\r\n        return null;\r\n    }\r\n\r\n    console.log(\"EXTREME POINTS\")\r\n    console.log(extremePoints)\r\n    if (extremePoints == null) return null;\r\n    let points: Vec2[] = []\r\n    points.push(extremePoints[0]);\r\n    points.push(extremePoints[1]);\r\n    // let dir = normalizeVector(vectorToCenter);\r\n   /* let dir = invertVector(fracture.getNormal());\r\n    let initPoint = extremePoints[0]\r\n\r\n\r\n\r\n    let distance = lengthVector(extremePoints[1], extremePoints[0]);\r\n    dir = new Vec2((extremePoints[1].x - extremePoints[0].x) / distance, (extremePoints[1].y - extremePoints[0].y) / distance)\r\n    let deltay = (extremePoints[1].y - extremePoints[0].y) / 3;\r\n    let deltax = (extremePoints[1].x - extremePoints[0].x) / 3;\r\n        console.log(\"DISTANCE: \"+distance)\r\n    let progress = distance / 2;\r\n\r\n    let followPath = true;\r\n    while (followPath) {\r\n        let newX = initPoint.x + (dir.x + (Math.random() - 0.5) * 0.2) * progress\r\n        let newY = initPoint.y + (dir.y + (Math.random() - 0.5) * 0.2) * progress\r\n        let possibleVec = new Vec2(newX, newY);\r\n\r\n        for (let j = 0; j < envol.length; ++j) {\r\n            let a = envol[j];\r\n            let b = envol[0];\r\n            if (j < envol.length - 1) b = envol[j + 1];\r\n            let c = lineCrossPoint(v2(initPoint.x, initPoint.y), possibleVec, a, b);\r\n            if (c[0] == 0) { // encontro una interseccion entre los dos puntos de cada lado\r\n                console.log(\"ENCONTRO UN CRUCE\")\r\n                points.push(c[1] as Vec2);\r\n\r\n                fracture.setPointB(j);\r\n\r\n                followPath = false;\r\n                break;\r\n            }\r\n            else if (c[0] > 0) { //encontro una interseccion pero al parecer coincide con alguno de los vertices\r\n\r\n                if ((c[1] as Vec2).equals(a)) {\r\n                    console.log(\"ENCONTRO UN CREUCE QUE CONCIDE CON PREVIOUS POINT\")\r\n                    let ac = getInterpolated(a, b, 0.2)\r\n                    fracture.setPointB(j);\r\n                    points.push(ac)\r\n                    followPath = false;\r\n\r\n                } else if ((c[1] as Vec2).equals(b)) {\r\n                    console.log(\"ENCONTRO UN CREUCE QUE CONCIDE CON POSTERIOR POINT\")\r\n                    let ac = getInterpolated(a, b, 0.8)\r\n                    fracture.setPointB(j);\r\n                    points.push(ac)\r\n                    followPath = false;\r\n                }\r\n              \r\n                break;\r\n            }\r\n        }\r\n        if(followPath) {\r\n            points.push(possibleVec)\r\n            initPoint=possibleVec;\r\n        }\r\n      \r\n    }*/\r\n    \r\n \r\n    if(fracture.getPointA()>fracture.getPointB()) {\r\n        console.log(\"!!!!!\")\r\n        console.log(\"POINT A: \"+fracture.getPointA()+\"     POINT B: \" + fracture.getPointB());\r\n        let temp = fracture.getPointB();\r\n        fracture.setPointB(fracture.getPointA());\r\n        fracture.setPointA(temp);\r\n        for(let i=1;i<points.length/2;i++) {\r\n            let tt=points[i];\r\n            points[i]=points[points.length-1-i]\r\n            points[points.length-1-i]=tt;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    console.log(\"FRACTURE POINTS\")\r\n    console.log(points)\r\n    fracture.setFracturePts(points);\r\n    return points;\r\n    }\r\n\r\n//Line segments cut polygons\r\n//returns the polygon array\r\n//Returns an empty array if not cut\r\n\r\nexport function lineCutPolygon(fractObj: Fracture) {\r\n    let ret: Array<Vec2[]> = [];\r\n    let points: Vec2[] = [];\r\n    let pointIndex: number[] = [];\r\n    let indexBeforeFractureA = fractObj.getPointA();\r\n\r\n    let indexBeforeFractureB = fractObj.getPointB();\r\n    let fracture: Vec2[] = [];\r\n    let polygon = fractObj.getEnvolvent();\r\n    let originalFracture = fractObj.getFracturePts();\r\n\r\n    console.log(\"-----OR FRACTURE-------------\")\r\n    console.log(originalFracture)\r\n    console.log(\"-----POLYGON-------------\")\r\n    console.log(polygon)\r\n\r\n    let partA: Vec2[] = [];\r\n    let partB: Vec2[] = [];\r\n    for (let i = 0; i < polygon.length; i++) {\r\n        partA.push(polygon[i])\r\n        if (i == indexBeforeFractureA) {\r\n            originalFracture.forEach(element => {\r\n                partA.push(element)\r\n            });\r\n            i = indexBeforeFractureB;\r\n            for (let j = indexBeforeFractureA + 1; j <= indexBeforeFractureB; j++) {\r\n                partB.push(polygon[j]);\r\n            }\r\n            for (let j = originalFracture.length - 1; j >= 0; j--) {\r\n                partB.push(originalFracture[j]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ret.push(partA)\r\n    ret.push(partB)\r\n    return ret;\r\n}\r\n//Find whether point a is on the line segment, >0 is not there, =0 is coincident with the endpoint, <0 is there.\r\nfunction point_on_line(a, p1, p2) {\r\n    return dblcmp(dot(p1.x - a.x, p1.y - a.y, p2.x - a.x, p2.y - a.y), 0);\r\n}\r\n\r\n\r\nexport function calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n    let area = 0;\r\n    /*EARCUT DATA: 50,20,0,   50,-40,0,   70,-40,0,    70,40,0,-15.101999249816531,40,0,-15.508626031865242,32.6402774377407,0,-14.76694312614122,26.933425973121036,0,-15.002643991594049,20,0*/\r\n    for (let i = 0; i < indexes.length; i += jump) {\r\n        let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n        let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n        let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let triangleArea = Math.abs(cross(x1, y1, x2, y2) / 2)\r\n        area += triangleArea;\r\n\r\n    }\r\n    return area;\r\n}\r\nexport function calcAproxArea(points: Vec2[]) {\r\n\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n\r\n\r\n\r\n    points.forEach(e => {\r\n        if (e.x > maxX) maxX = e.x;\r\n        if (e.x < minX) minX = e.x;\r\n        if (e.y > maxY) maxY = e.y;\r\n        if (e.y < minY) minY = e.y;\r\n    });\r\n    return (maxX - minX) * (maxY - minY)\r\n}\r\n\r\n\r\n//Find the intersection point of two line segments\r\n//Return value: [n,p] n: 0 intersects, 1 is at the common point, -1 does not intersect p: intersection point\r\nfunction lineCrossPoint(p1: Vec2, p2: Vec2, q1: Vec2, q2: Vec2): [number, Vec2] {\r\n    // console.log(\"Helper - Line Cross Point\")\r\n    let a = p1, b = p2, c = q1, d = q2;\r\n    let s1, s2, s3, s4;\r\n    let d1, d2, d3, d4;\r\n    let p: Vec2 = new Vec2(0, 0);\r\n    d1 = dblcmp(s1 = ab_cross_ac(a, b, c), 0);\r\n    d2 = dblcmp(s2 = ab_cross_ac(a, b, d), 0);\r\n    d3 = dblcmp(s3 = ab_cross_ac(c, d, a), 0);\r\n    d4 = dblcmp(s4 = ab_cross_ac(c, d, b), 0);\r\n    if ((d1 ^ d2) == -2 && (d3 ^ d4) == -2) {\r\n        p.x = (c.x * s2 - d.x * s1) / (s2 - s1);\r\n        p.y = (c.y * s2 - d.y * s1) / (s2 - s1);\r\n        return [0, p];\r\n    }\r\n    if (d1 == 0 && point_on_line(c, a, b) <= 0) { p = c; return [1, p]; }\r\n    if (d2 == 0 && point_on_line(d, a, b) <= 0) { p = d; return [1, p]; }\r\n    if (d3 == 0 && point_on_line(a, c, d) <= 0) { p = a; return [1, p]; }\r\n    if (d4 == 0 && point_on_line(b, c, d) <= 0) { p = b; return [1, p]; }\r\n    return [-1, null];\r\n}\r\n\r\n\r\n\r\n"]}
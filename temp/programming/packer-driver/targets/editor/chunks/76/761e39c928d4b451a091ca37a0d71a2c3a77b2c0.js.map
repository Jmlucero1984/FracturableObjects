{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/UnitTest.ts"],"names":["_decorator","Component","RichText","Vec2","linkNode","calculateEnvolArea","findClosestAngle","earcut","ccclass","property","executeInEditMode","UnitTest","onLoad","console","log","onEnable","outputText","string","tests","push","AngleTest1","EarcutAreaCasitaTest","forEach","t","name","update","deltaTime","degToRad","angleDeg","nums","indexes","areaCalculated","areaExpected","Math","abs","vectores","angulos","linksNodesTest","i","length","x","y"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RichText, Vec2 } from 'cc';\r\nimport { linkNode } from '../LinkNodeClass';\r\nimport { TEST } from 'cc/env';\r\nimport { calculateEnvolArea, findClosestAngle } from './DelaunaySplitter';\r\nimport { earcut } from './earcut';\r\n\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n\r\n@ccclass('UnitTest')\r\n@executeInEditMode\r\nexport class UnitTest extends Component {\r\n\r\n    @property(RichText)\r\n    outputText: RichText\r\n\r\n    onLoad() {\r\n        console.log(\"ON LOAD UNIT TEST\")\r\n    }\r\n\r\n    onEnable() {\r\n        this.outputText.string = \"<color=#0000ff>--- RUNNING TESTS ---\\n </color>\"\r\n        const tests: Function[] = [];\r\n        tests.push(this.AngleTest1);\r\n        tests.push(this.EarcutAreaCasitaTest)\r\n        tests.forEach(t => {\r\n            this.outputText.string += \"<color=#00ff00>\" + t.name + \"\\n</color>\"\r\n            if (t()) {\r\n                this.outputText.string += \"<color=#00ff00> >PASSED\\n</color>\"\r\n            } else {\r\n                this.outputText.string += \"<color=#ff0000> >FAILED\\n</color>\"\r\n            }\r\n        })\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n    static degToRad(angleDeg: number) {\r\n        return (angleDeg / 360) * 2 * 3.141592654\r\n    }\r\n\r\n    \r\n    EarcutAreaCasitaTest() {\r\n\r\n        let nums:number[]=[];\r\n\r\n\r\n        nums=[0,0,5,0,5,5,2.5,7.5,0,5,0,0]\r\n        let indexes = earcut(nums,null,2)\r\n\r\n        let areaCalculated=calculateEnvolArea(indexes, nums,3)\r\n        console.log(\"AREA CALCULATED: \"+areaCalculated);\r\n        let areaExpected=32.25;\r\n        return Math.abs(areaCalculated-areaExpected)<0.01;\r\n\r\n\r\n\r\n    }\r\n\r\n    AngleTest1() {\r\n        let vectores: Vec2[] = [];\r\n        let angulos: number[] = [];\r\n\r\n        vectores.push(new Vec2(1, 0))\r\n        vectores.push(new Vec2(0.94, 0.34))\r\n        vectores.push(new Vec2(0.55, 0.84))\r\n        vectores.push(new Vec2(0, 1))\r\n        vectores.push(new Vec2(-0.52, 0.86))\r\n        vectores.push(new Vec2(-1, 0))\r\n        vectores.push(new Vec2(-0.93, -0.36))\r\n        vectores.push(new Vec2(-0.31, -0.95))\r\n        vectores.push(new Vec2(0, -1))\r\n        vectores.push(new Vec2(0.20, -0.98))\r\n        vectores.push(new Vec2(0.99, -0.17))\r\n\r\n        angulos.push(0);\r\n        angulos.push(20)\r\n        angulos.push(56.7)\r\n        angulos.push(90)\r\n        angulos.push(121.1)\r\n        angulos.push(180)\r\n        angulos.push(201.1)\r\n        angulos.push(252)\r\n        angulos.push(270)\r\n        angulos.push(281.5)\r\n        angulos.push(350.4)\r\n        console.log(vectores)\r\n        console.log(\"------- TEST 1 -------\")\r\n        let linksNodesTest: linkNode[] = [];\r\n        for (let i = 0; i < vectores.length; i++) {\r\n            linksNodesTest.push(new linkNode(vectores[i].x, vectores[i].y, UnitTest.degToRad(angulos[i])));\r\n        }\r\n        return findClosestAngle(UnitTest.degToRad(359), linksNodesTest) == 2;\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}
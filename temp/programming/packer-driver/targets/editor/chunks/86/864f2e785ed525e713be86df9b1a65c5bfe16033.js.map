{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/DelaunayAssembler.ts"],"names":["Point2","calculateEnvolArea","indexes","coords","jump","area","i","length","x1","y1","x2","y2","triangleArea","Math","abs","cross","_decorator","Graphics","Vec2","Color","UIVertexFormat","gfx","warnID","director","RenderingSubMesh","Vec3","v2","Texture2D","Material","math","earcut","ccclass","property","attributes2","vfmtPosColor","concat","Attribute","Format","R32F","componentPerVertex2","getComponentPerVertex","stride2","getAttributeStride","constructor","x","y","dx","dy","dmx","dmy","flags","len","lineLength","reset","attrBytes2","_impl","MAX_VERTEX","MAX_INDICES","PI","min","max","ceil","acos","cos","sin","atan2","_tempV2","_renderData","_curColor","vec3_temps","push","indexStart","lineC","polygonPoints","textureWidth","textureHeight","meshWidth","uv_unit","calculateDistances","points","sum","res","vector_a","vector_b","_distances","index","dist","pushInto","receiver","newData","copyWithin","isInTriangle","point","triA","triB","triC","AB","subtract","AC","BC","AD","BD","splitPolygon","pointMap","p","getIdx","idxs","p1","p2","p3","splitPoint","v1","hasPoint","splice","computeUv","width","height","uvs","clamp","DelaunayAssembler","group","type","onLoad","polygon","baseTexture","Render_Mat","setMaterial","getSharedMaterial","setProperty","modifyPoints","newPoints","clear","stroke","getArea","setPoints","onEnable","onDestroy","start","_flushAssembler","assembler","Assembler","getAssembler","superGraphicsAssembler","kk","graphics","impl","_expandStroke","updatePathOffset","end","meshBuffer","getRenderData","my_i_data","my_v_data","theUvs","initIndex","earcutData","j","vDataOffset","newIndices","_iSet","_vSet","vertexCount","renderDataList","getRenderDataList","renderData","dataOffset","maxVertexCount","vertexStart","requestRenderData","request","iData","distance","lineLong","vData","toArray","WHITE","_assembler","activeSubModel","idx","model","node","name","subModels","gfxDevice","root","device","vertexBuffer","createBuffer","BufferInfo","BufferUsageBit","VERTEX","TRANSFER_DST","MemoryUsageBit","DEVICE","indexBuffer","INDEX","Uint16Array","BYTES_PER_ELEMENT","renderMesh","PrimitiveMode","TRIANGLE_LIST","subMeshIdx","getMaterialInstance","initSubModel","_uploadData","subModelList","ia","inputAssembler","lastFilledVertex","vb","Float32Array","buffer","vertexBuffers","update","ib","indexCount","lastFilledIndex","_isNeedUploadData"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Graphics, Vec2, Color, __private, UIVertexFormat, gfx, warnID, director, RenderingSubMesh, Vec3, v2, Texture2D, Material, MeshRenderData, log, math } from 'cc';\r\nimport { earcut } from './earcut';\r\n\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\nconst attributes2 = UIVertexFormat.vfmtPosColor.concat([\r\n    new gfx.Attribute('a_dist', gfx.Format.R32F),\r\n    new gfx.Attribute('a_line', gfx.Format.R32F),\r\n]);\r\n\r\nconst componentPerVertex2 = UIVertexFormat.getComponentPerVertex(attributes2);\r\n\r\nconst stride2 = UIVertexFormat.getAttributeStride(attributes2);\r\nfunction calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n    let area = 0;\r\n\r\n    for (let i = 0; i < indexes.length; i += jump) {\r\n        let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n        let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n        let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let triangleArea = Math.abs(cross(x1, y1, x2, y2) / 2)\r\n        area += triangleArea;\r\n\r\n    }\r\n    return area;\r\n}\r\nfunction cross(x1, y1, x2, y2) {\r\n    return x1 * y2 - x2 * y1;\r\n}\r\nclass Point2 extends Vec2 {\r\n    public dx = 0;\r\n    public dy = 0;\r\n    public dmx = 0;\r\n    public dmy = 0;\r\n    public flags = 0;\r\n    public len = 0;\r\n    public lineLength = 0;\r\n    constructor(x: number, y: number) {\r\n        super(x, y);\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this.dx = 0;\r\n        this.dy = 0;\r\n        this.dmx = 0;\r\n        this.dmy = 0;\r\n        this.flags = 0;\r\n        this.len = 0;\r\n        this.lineLength = 0;\r\n    }\r\n}\r\n\r\n\r\nconst attrBytes2 = 9;\r\nlet _impl: __private._cocos_2d_assembler_graphics_webgl_impl__Impl | null = null;\r\n\r\nconst MAX_VERTEX = 65535;\r\nconst MAX_INDICES = MAX_VERTEX * 2;\r\n\r\nconst PI = Math.PI;\r\nconst min = Math.min;\r\nconst max = Math.max;\r\nconst ceil = Math.ceil;\r\nconst acos = Math.acos;\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\nconst atan2 = Math.atan2;\r\nconst _tempV2 = v2();\r\n\r\n\r\nlet _renderData: MeshRenderData | null = null;\r\nconst _curColor = new Color();\r\n\r\nconst vec3_temps: Vec3[] = [];\r\nfor (let i = 0; i < 4; i++) {\r\n    vec3_temps.push(new Vec3());\r\n}\r\n\r\nlet indexStart: number = 0;\r\nlet lineC: number = 1;\r\nlet polygonPoints: Vec2[] = [];\r\nlet textureWidth: number = 0;\r\nlet textureHeight: number = 0;\r\nlet meshWidth: number = 0;\r\nlet uv_unit: boolean = false;\r\nlet area: number = 0;\r\n\r\nconst calculateDistances = function (points: Vec2[]): number[] {\r\n    let sum = 0;\r\n    const res = function (vector_a: Vec2, vector_b: Vec2) {\r\n        return v2(vector_a.x - vector_b.x, vector_a.y - vector_b.y);\r\n    }\r\n    let _distances: number[] = [];\r\n    for (let index = 0; index < points.length - 1; index++) {\r\n        let dist = res(points[index + 1], points[index]).length()\r\n        _distances.push(dist)\r\n        sum += dist;\r\n    }\r\n    _distances.push(sum);\r\n    return _distances;\r\n}\r\n\r\nconst pushInto = function (receiver: any, newData: any[]) {\r\n    for (let index = 0; index < newData.length; index++) {\r\n        receiver.copyWithin\r\n        receiver.push(newData[index]);\r\n    }\r\n}\r\nconst isInTriangle = function (point: Vec2, triA: Vec2, triB: Vec2, triC: Vec2) {\r\n    //  console.log(\"Helper - Is in triangle\")\r\n    let AB: Vec2 = new Vec2();\r\n    Vec2.subtract(AB, triB, triA);\r\n\r\n    let AC: Vec2 = new Vec2();\r\n    Vec2.subtract(AC, triC, triA);\r\n\r\n    let BC: Vec2 = new Vec2();\r\n    Vec2.subtract(BC, triC, triB);\r\n\r\n    let AD: Vec2 = new Vec2();\r\n    Vec2.subtract(AD, point, triA);\r\n\r\n    let BD: Vec2 = new Vec2();\r\n    Vec2.subtract(BD, point, triB);\r\n\r\n    //@ts-ignore\r\n    return (AB.cross(AC) >= 0 ^ AB.cross(AD) < 0) && (AB.cross(AC) >= 0 ^ AC.cross(AD) >= 0) && (BC.cross(AB) > 0 ^ BC.cross(BD) >= 0);\r\n}\r\n\r\nconst splitPolygon = function (points: Vec2[]): number[] {\r\n    // console.log(\"Helper - Split poligon\") // Lo llama continuamente...\r\n    if (points.length <= 3) return [0, 1, 2];\r\n    let pointMap: { [key: string]: number } = {};     // The mapping between point and idx\r\n    for (let i = 0; i < points.length; i++) {\r\n        let p = points[i];\r\n        pointMap[`${p.x}-${p.y}`] = i;\r\n    }\r\n    const getIdx = (p: Vec2) => {\r\n        return pointMap[`${p.x}-${p.y}`]\r\n    }\r\n    points = points.concat([]);\r\n    let idxs: number[] = [];\r\n\r\n    let index = 0;\r\n    while (points.length > 3) {\r\n        let p1 = points[(index) % points.length]\r\n            , p2 = points[(index + 1) % points.length]\r\n            , p3 = points[(index + 2) % points.length];\r\n        let splitPoint = (index + 1) % points.length;\r\n\r\n        let v1: Vec2 = new Vec2();\r\n        Vec2.subtract(v1, p2, p1);\r\n        let v2: Vec2 = new Vec2();\r\n        Vec2.subtract(v2, p3, p2);\r\n\r\n        if (v1.cross(v2) < 0) {      // is a concave corner, look for the next\r\n            index = (index + 1) % points.length;\r\n            continue;\r\n        }\r\n        let hasPoint = false;\r\n        for (const p of points) {\r\n            if (p != p1 && p != p2 && p != p3 && isInTriangle(p, p1, p2, p3)) {\r\n                hasPoint = true;\r\n                break;\r\n            }\r\n        }\r\n        if (hasPoint) {      // The current triangle contains other points, find the next\r\n            index = (index + 1) % points.length;\r\n            continue;\r\n        }\r\n        // Found the ear, cut it off\r\n        idxs.push(getIdx(p1), getIdx(p2), getIdx(p3));\r\n        points.splice(splitPoint, 1);\r\n    }\r\n    for (const p of points) {\r\n        idxs.push(getIdx(p));\r\n    }\r\n    return idxs;\r\n}\r\n\r\nconst computeUv = function (points: Vec2[], width: number, height: number) {\r\n    //console.log(\"Helper - compute uv\")\r\n    let uvs: Vec2[] = [];\r\n    for (const p of points) {\r\n        // The uv origin is the upper left corner\r\n        let x = math.clamp(0, 1, (p.x + width / 2) / width);\r\n        let y = math.clamp(0, 1, 1. - (p.y + height / 2) / height);\r\n        uvs.push(v2(x, y));\r\n    }\r\n    return uvs;\r\n}\r\n\r\n\r\n@ccclass('DelaunayAssembler')\r\nexport class DelaunayAssembler extends Graphics {\r\n    @property({ group: \"Render\" })\r\n    @property(Texture2D)\r\n    baseTexture: Texture2D = null;\r\n    @property({ group: \"Render\" })\r\n    @property(Material)\r\n    Render_Mat: Material = null;\r\n    @property({ type: [Vec2] })\r\n    polygon: Vec2[] = [];\r\n\r\n    onLoad() {\r\n        this.polygon = [];\r\n        if (this.baseTexture) {\r\n            textureWidth = this.baseTexture.width;\r\n            textureHeight = this.baseTexture.height;\r\n          //  console.log(\"TEX WIDTH: \" + textureWidth)\r\n           // console.log(\"TEX HEIGTH: \" + textureHeight)\r\n        }\r\n        if (this.Render_Mat) {\r\n            this.setMaterial(this.Render_Mat, 0);\r\n            if (this.baseTexture)\r\n                this.getSharedMaterial(0).setProperty(\"texture1\", this.baseTexture);\r\n        }\r\n        polygonPoints = this.polygon;\r\n        super.onLoad();\r\n    }\r\n\r\n\r\n    modifyPoints(newPoints: Vec2[]) {\r\n        this.clear();\r\n        polygonPoints = newPoints;\r\n        this.polygon = newPoints;\r\n    //    console.log(newPoints)\r\n        this.stroke();\r\n    }\r\n\r\n    getArea() {\r\n        return area;\r\n    }\r\n\r\n    setPoints(points: Vec2[]) {\r\n      //  console.log(\"SET POINTS CALLED\")\r\n        polygonPoints = points;\r\n    }\r\n    onEnable() {\r\n        if (this.Render_Mat) {\r\n            this.setMaterial(this.Render_Mat, 0);\r\n            if (this.baseTexture)\r\n                this.getSharedMaterial(0).setProperty(\"texture1\", this.baseTexture);\r\n        }\r\n    }\r\n    onDestroy() {\r\n\r\n    };\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * initialization assembler render data assembler\r\n     */\r\n    protected _flushAssembler() {\r\n        const assembler = Graphics.Assembler!.getAssembler(this);\r\n        let superGraphicsAssembler: any = {};\r\n        for (let kk in assembler) {\r\n            superGraphicsAssembler[kk] = assembler[kk];\r\n        }\r\n\r\n\r\n        superGraphicsAssembler.stroke = function (graphics: Graphics) {\r\n            if (!graphics.impl) { return; }\r\n            this._expandStroke!(graphics);\r\n            graphics.impl.updatePathOffset = true;\r\n            this.end(graphics);\r\n        };\r\n\r\n\r\n\r\n\r\n        superGraphicsAssembler._expandStroke = function (graphics: Graphics) {\r\n            let indexStart: number = 0;\r\n\r\n            _impl = graphics.impl;\r\n            if (!_impl) { return; }\r\n\r\n            const meshBuffer: MeshRenderData | null = _renderData = this.getRenderData!(graphics, 300);\r\n            if (!meshBuffer) { return; }\r\n\r\n\r\n\r\n            let my_i_data: number[] = [];\r\n            let my_v_data: Float32List = [];\r\n            if (true) {\r\n                let theUvs = computeUv(polygonPoints, textureWidth * 2, textureHeight * 2);\r\n                //  console.log(theUvs)\r\n                for (let index = 0; index < polygonPoints.length; index++) {\r\n                    pushInto(my_v_data, [polygonPoints[index].x, polygonPoints[index].y, 0, 1, 1, 1, 1, theUvs[index].x, theUvs[index].y]);\r\n                }\r\n                let initIndex = 0;\r\n                const earcutData: number[] = [];\r\n                for (let j = 0; j < my_v_data.length / 9; j++) {\r\n                    let vDataOffset = j * attrBytes2;\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                    earcutData.push(my_v_data[vDataOffset++]);\r\n                }\r\n\r\n                const newIndices = earcut(earcutData, null, 3);\r\n                // console.log(\"INDICES\")\r\n                //console.log(newIndices)\r\n                let indexes = newIndices\r\n\r\n                area = calculateEnvolArea(indexes, earcutData, 3);\r\n                for (let index = 0; index < indexes.length; index += 3) {\r\n                    pushInto(my_i_data, [indexes[index], indexes[index + 1], indexes[index + 2]])\r\n                }\r\n\r\n            }\r\n\r\n\r\n            for (let index = 0; index < my_i_data.length; index++) {\r\n                this._iSet(my_i_data[index])\r\n            }\r\n\r\n\r\n            for (let index = 0; index < my_v_data.length; index += 9) {\r\n                this._vSet(my_v_data[index], my_v_data[index + 1], my_v_data[index + 7], my_v_data[index + 8])\r\n            }\r\n\r\n            _renderData = null;\r\n            _impl = null;\r\n        };\r\n\r\n\r\n        //**get a render data */\r\n        superGraphicsAssembler.getRenderData = function (graphics: Graphics, vertexCount: number): MeshRenderData {\r\n\r\n            if (!_impl) {\r\n                return null;\r\n            }\r\n            const renderDataList = _impl.getRenderDataList();\r\n            let renderData = renderDataList[_impl.dataOffset];\r\n            if (!renderData) {\r\n                return null;\r\n            }\r\n\r\n            let meshBuffer = renderData;\r\n            const maxVertexCount = meshBuffer ? meshBuffer.vertexStart + vertexCount : 0;\r\n            if (maxVertexCount > MAX_VERTEX || maxVertexCount * 3 > MAX_INDICES) {\r\n                ++_impl.dataOffset;\r\n\r\n                if (_impl.dataOffset < renderDataList.length) {\r\n                    renderData = renderDataList[_impl.dataOffset];\r\n                } else {\r\n                    renderData = _impl.requestRenderData();\r\n                    renderDataList[_impl.dataOffset] = renderData;\r\n                }\r\n                meshBuffer = renderData;\r\n            }\r\n\r\n            if (meshBuffer && meshBuffer.vertexCount < maxVertexCount) {\r\n                meshBuffer.request(vertexCount, vertexCount * 3);\r\n            }\r\n            return renderData;\r\n        };\r\n\r\n        superGraphicsAssembler._iSet = function (i: number) {\r\n            if (!_renderData) {\r\n                return;\r\n            }\r\n            const meshBuffer = _renderData;\r\n            // let dataOffset = meshBuffer.vertexStart * attrBytes2;\r\n            const iData = meshBuffer.iData;\r\n            iData[meshBuffer.indexStart] = i;\r\n            meshBuffer.indexStart++;\r\n        }\r\n        /**set vertex data */\r\n        superGraphicsAssembler._vSet = function (x: number, y: number, distance = 0, lineLong = 0) {\r\n            if (!_renderData) {\r\n                return;\r\n            }\r\n            const meshBuffer = _renderData;\r\n            let dataOffset = meshBuffer.vertexStart * attrBytes2;\r\n            const vData = meshBuffer.vData;\r\n            vData[dataOffset++] = x;\r\n            vData[dataOffset++] = y;\r\n            vData[dataOffset++] = 0;\r\n            Color.toArray(vData, Color.WHITE, dataOffset);\r\n            dataOffset += 4;\r\n            vData[dataOffset++] = distance;\r\n            vData[dataOffset++] = lineLong;\r\n            meshBuffer.vertexStart++;\r\n        }\r\n\r\n        if (this._assembler !== superGraphicsAssembler) {\r\n            this._assembler = superGraphicsAssembler;\r\n        }\r\n    }\r\n\r\n    /**Create vertex databuffer */\r\n    public activeSubModel(idx: number) {\r\n        if (!this.model) {\r\n            warnID(4500, this.node.name);\r\n            return;\r\n        }\r\n\r\n        if (this.model.subModels.length <= idx) {\r\n            const gfxDevice: gfx.Device = director.root.device;\r\n            const vertexBuffer = gfxDevice.createBuffer(new gfx.BufferInfo(\r\n                gfx.BufferUsageBit.VERTEX | gfx.BufferUsageBit.TRANSFER_DST,\r\n                gfx.MemoryUsageBit.DEVICE,\r\n                65535 * stride2,\r\n                stride2,\r\n            ));\r\n            const indexBuffer = gfxDevice.createBuffer(new gfx.BufferInfo(\r\n                gfx.BufferUsageBit.INDEX | gfx.BufferUsageBit.TRANSFER_DST,\r\n                gfx.MemoryUsageBit.DEVICE,\r\n                65535 * Uint16Array.BYTES_PER_ELEMENT * 2,\r\n                Uint16Array.BYTES_PER_ELEMENT,\r\n            ));\r\n            const renderMesh = new RenderingSubMesh([vertexBuffer], attributes2, gfx.PrimitiveMode.TRIANGLE_LIST, indexBuffer);\r\n            renderMesh.subMeshIdx = 0;\r\n            if (this.getMaterialInstance(0)) {\r\n                this.model.initSubModel(idx, renderMesh, this.getMaterialInstance(0)!);\r\n            }\r\n            this[\"_graphicsUseSubMeshes\"].push(renderMesh);\r\n        }\r\n    }\r\n    /**Refresh the rendering data */\r\n    protected _uploadData() {\r\n        const impl = this.impl;\r\n        if (!impl) {\r\n            return;\r\n        }\r\n\r\n        const renderDataList = impl && impl.getRenderDataList();\r\n        if (renderDataList.length <= 0 || !this.model) {\r\n            return;\r\n        }\r\n\r\n        const subModelList = this.model.subModels;\r\n        for (let i = 0; i < renderDataList.length; i++) {\r\n            const renderData = renderDataList[i];\r\n            const ia = subModelList[i].inputAssembler;\r\n            if (renderData.lastFilledVertex === renderData.vertexStart) { continue; }\r\n            const vb = new Float32Array(renderData.vData.buffer, 0, renderData.vertexStart * componentPerVertex2);\r\n            ia.vertexBuffers[0].update(vb);\r\n            ia.vertexCount = renderData.vertexStart;\r\n            const ib = new Uint16Array(renderData.iData.buffer, 0, renderData.indexStart);\r\n            ia.indexBuffer!.update(ib);\r\n            ia.indexCount = renderData.indexStart;\r\n            renderData.lastFilledVertex = renderData.vertexStart;\r\n            renderData.lastFilledIndex = renderData.indexStart;\r\n        }\r\n        this._isNeedUploadData = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]}
{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/UnitTest.ts"],"names":["_decorator","Component","RichText","Vec2","linkNode","calculateEnvolArea2D","findClosestAngle","earcut","ccclass","property","executeInEditMode","UnitTest","onLoad","console","log","onEnable","outputText","string","tests","push","AngleTest1","EarcutAreaCasitaTest","EarcutAreaHexagonoTest","EarcutAreaEstrellaTest","forEach","t","name","update","deltaTime","degToRad","angleDeg","nums","indexes","areaCalculated","areaExpected","Math","abs","vectores","angulos","linksNodesTest","i","length","x","y"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, RichText, Vec2 } from 'cc';\r\nimport { linkNode } from '../LinkNodeClass';\r\nimport { TEST } from 'cc/env';\r\nimport { calculateEnvolArea, calculateEnvolArea2D, findClosestAngle } from './DelaunaySplitter';\r\nimport { earcut } from './earcut';\r\n\r\nconst { ccclass, property, executeInEditMode } = _decorator;\r\n\r\n\r\n@ccclass('UnitTest')\r\n@executeInEditMode\r\nexport class UnitTest extends Component {\r\n\r\n    @property(RichText)\r\n    outputText: RichText\r\n\r\n    onLoad() {\r\n        console.log(\"ON LOAD UNIT TEST\")\r\n    }\r\n\r\n    onEnable() {\r\n        this.outputText.string = \"<color=#0000ff>--- RUNNING TESTS ---\\n </color>\"\r\n        const tests: Function[] = [];\r\n        tests.push(this.AngleTest1);\r\n        tests.push(this.EarcutAreaCasitaTest)\r\n        tests.push(this.EarcutAreaHexagonoTest)\r\n        tests.push(this.EarcutAreaEstrellaTest)\r\n     \r\n      \r\n        tests.forEach(t => {\r\n            this.outputText.string += \"<color=#00ff00>\" + t.name + \"\\n</color>\"\r\n            if (t()) {\r\n                this.outputText.string += \"<color=#00ff00> >PASSED\\n</color>\"\r\n            } else {\r\n                this.outputText.string += \"<color=#ff0000> >FAILED\\n</color>\"\r\n            }\r\n        })\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n    static degToRad(angleDeg: number) {\r\n        return (angleDeg / 360) * 2 * 3.141592654\r\n    }\r\n\r\n    \r\n    EarcutAreaCasitaTest() {\r\n        let nums:number[]=[];\r\n        nums=[0,0,5,0,5,5,2.5,7.5,0,5]\r\n        let indexes = earcut(nums,null,2)\r\n       console.log(\"INDEXES: \"+indexes)\r\n        let areaCalculated=calculateEnvolArea2D(indexes, nums);\r\n        console.log(\"AREA CALCULATED: \"+areaCalculated);\r\n        let areaExpected=31.25;\r\n        return Math.abs(areaCalculated-areaExpected)<0.01;\r\n    }\r\n\r\n     \r\n    EarcutAreaHexagonoTest() {\r\n        let nums:number[]=[];\r\n        nums=[2.3,0.77,4.81,2.22,4.81,5.12,2.30,6.57,-0.21,5.12,-0.21,2.22]\r\n        let indexes = earcut(nums,null,2)\r\n       console.log(\"INDEXES: \"+indexes)\r\n        let areaCalculated=calculateEnvolArea2D(indexes, nums);\r\n        console.log(\"AREA CALCULATED: \"+areaCalculated);\r\n        let areaExpected=21.807;\r\n        return Math.abs(areaCalculated-areaExpected)<0.1\r\n    }\r\n    EarcutAreaEstrellaTest() {\r\n        let nums:number[]=[];\r\n        nums=[-0.10,-0.88,2.6,2.16,5.29,-0.88,4,2.97,7.98,3.78,4,4.59,5.29,8.45,2.60,5.41,-0.1,8.45,1.19,4.59,-2.79,3.78,1.19,2.97]\r\n        let indexes = earcut(nums,null,2)\r\n       console.log(\"INDEXES: \"+indexes)\r\n        let areaCalculated=calculateEnvolArea2D(indexes, nums);\r\n        console.log(\"AREA CALCULATED: \"+areaCalculated);\r\n        let areaExpected=26.256;\r\n        return Math.abs(areaCalculated-areaExpected)<0.01\r\n    }\r\n\r\n\r\n    AngleTest1() {\r\n        let vectores: Vec2[] = [];\r\n        let angulos: number[] = [];\r\n\r\n        vectores.push(new Vec2(1, 0))\r\n        vectores.push(new Vec2(0.94, 0.34))\r\n        vectores.push(new Vec2(0.55, 0.84))\r\n        vectores.push(new Vec2(0, 1))\r\n        vectores.push(new Vec2(-0.52, 0.86))\r\n        vectores.push(new Vec2(-1, 0))\r\n        vectores.push(new Vec2(-0.93, -0.36))\r\n        vectores.push(new Vec2(-0.31, -0.95))\r\n        vectores.push(new Vec2(0, -1))\r\n        vectores.push(new Vec2(0.20, -0.98))\r\n        vectores.push(new Vec2(0.99, -0.17))\r\n\r\n        angulos.push(0);\r\n        angulos.push(20)\r\n        angulos.push(56.7)\r\n        angulos.push(90)\r\n        angulos.push(121.1)\r\n        angulos.push(180)\r\n        angulos.push(201.1)\r\n        angulos.push(252)\r\n        angulos.push(270)\r\n        angulos.push(281.5)\r\n        angulos.push(350.4)\r\n        console.log(vectores)\r\n        console.log(\"------- TEST 1 -------\")\r\n        let linksNodesTest: linkNode[] = [];\r\n        for (let i = 0; i < vectores.length; i++) {\r\n            linksNodesTest.push(new linkNode(vectores[i].x, vectores[i].y, UnitTest.degToRad(angulos[i])));\r\n        }\r\n        return findClosestAngle(UnitTest.degToRad(359), linksNodesTest) == 0;\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}
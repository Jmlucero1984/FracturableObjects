{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/WholeDelaunay.ts"],"names":["_decorator","Vec2","linkNode","plainVertex","ccclass","property","WholeDelaunay","constructor","dfins","delFracInstance","ab_cross_ac","a","b","c","cross","x","y","rnd","Math","round","polygonToString","polygon","output","i","length","calculateCenterMass","poly","sumx","sumy","cant","forEach","element","dot","x1","y1","x2","y2","isInPolygon","checkPoint","polygonPoints","counter","xinters","p1","p2","pointCount","min","max","invertVector","vec","findFracture","points","direction","getNormal","nearestIndex","minDistance","delaunayPoints","distance","lengthVector","contactPoint","links","border","console","log","push","nextPv","founded","firstDir","last","actualLinks","indBestFit","findClosestAngle","getRelativeAngle","closesdtIndex","findClosestIndex","promediardireccion","aIndex","bIndex","setPointA","setPointB","reverse","setFracturePts","vecA","vecB","unitaryVector","rads","getRads","transformedVectorB","cos","sin","constPI","baseAngle","abs","atan","pVs","index","pos","angle","linkNodes","PI","minAngle","diff","_angle","posA","posB","isBorder","point","el","sqrt","pow","getFracturable","ret","internals","deepCopy","partA","partB","externals","continuar","getPointA","fracturePoints","k","cloneVertexPlain","j","getPointB","before","removeOutRunners","verts","v1","v2","maxAngle","filterNulls","elementsArr","pop","pv","externalBorder","pv_el","newPv","newLinkNodes","ln","newlinkNode","ver","newLNode","roundValue","val","calculateEnvolArea","indexes","coords","jump","area","triangleArea","calcAproxArea","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","e"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2 } from 'cc';\r\nimport { DelaunayFracture, linkNode, plainVertex } from './DelaunaySplitter';\r\nimport { DelaunayFractureClass } from './DelaunayFractureClass';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('WholeDelaunay')\r\nexport class WholeDelaunay {\r\n    public delFracInstance: DelaunayFractureClass\r\n    \r\n    public constructor(dfins:DelaunayFractureClass){\r\n        this.delFracInstance=dfins;\r\n    }\r\n\r\n  \r\n    ab_cross_ac(a, b, c) //The cross product of ab and ac\r\n    {\r\n        return this.cross(b.x - a.x, b.y - a.y, c.x - a.x, c.y - a.y);\r\n    }\r\n\r\n    rnd(x: number) {\r\n        return Math.round(x * 1000) / 1000;\r\n    }\r\n\r\n    polygonToString(polygon: Vec2[]) {\r\n        let output: string = \"this.gr.moveTo(\" + this.rnd(polygon[0].x) + \",\" + this.rnd(polygon[0].y) + \");\"\r\n        for (let i = 1; i < polygon.length; i++) {\r\n            output += \"this.gr.lineTo(\" + this.rnd(polygon[i].x) + \",\" + this.rnd(polygon[i].y) + \");\"\r\n        }\r\n        output += \"this.gr.close();\"\r\n    }\r\n\r\n\r\n    calculateCenterMass(poly: Vec2[]) {\r\n        let sumx = 0;\r\n        let sumy = 0;\r\n        let cant = poly.length;\r\n        poly.forEach(element => {\r\n            sumx += element.x;\r\n            sumy += element.y;\r\n        });\r\n        return new Vec2(sumx / cant, sumy / cant);\r\n    }\r\n    dot(x1, y1, x2, y2) {\r\n        return x1 * x2 + y1 * y2;\r\n    }\r\n    cross(x1, y1, x2, y2) {\r\n        return x1 * y2 - x2 * y1;\r\n    }\r\n\r\n    isInPolygon(checkPoint: Vec2, polygonPoints: Vec2[]) {\r\n        var counter = 0;\r\n        var i: number;\r\n        var xinters;\r\n        var p1: Vec2, p2: Vec2;\r\n        var pointCount = polygonPoints.length;\r\n        p1 = polygonPoints[0];\r\n        for (i = 1; i <= pointCount; i++) {\r\n            p2 = polygonPoints[i % pointCount];\r\n            if (checkPoint.x > Math.min(p1.x, p2.x) && checkPoint.x <= Math.max(p1.x, p2.x)) {\r\n                if (checkPoint.y <= Math.max(p1.y, p2.y)) {\r\n                    if (p1.x != p2.x) {\r\n                        xinters = (checkPoint.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;\r\n                        if (p1.y == p2.y || checkPoint.y <= xinters) {\r\n                            counter++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            p1 = p2;\r\n        }\r\n        if (counter % 2 == 0) { return false; }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    invertVector(vec: Vec2) {\r\n        return new Vec2(-1 * vec.x, -1 * vec.y)\r\n    }\r\n\r\n\r\n    findFracture() {\r\n        let points: plainVertex[] = [];\r\n        let direction = this.invertVector(this.delFracInstance.getNormal());\r\n        let nearestIndex = 0;\r\n        let minDistance = 10000;\r\n        for (let i = 0; i < this.delFracInstance.delaunayPoints.length; i++) {\r\n            let element = this.delFracInstance.delaunayPoints[i]\r\n            let distance = this.lengthVector(this.delFracInstance.contactPoint, new Vec2(element.x, element.y))\r\n            if (distance < minDistance && element.links.length > 0 && element.border) {\r\n                minDistance = distance\r\n                nearestIndex = i;\r\n                //  console.log(\"DISTANCE: \" + distance)\r\n                // console.log(\"NEW VERT: \" + nearestIndex)\r\n            }\r\n        }\r\n        console.log(\"NEAREST LOCACTION!\")\r\n        console.log(\"CONTACT POINT: \" + this.delFracInstance.contactPoint)\r\n        console.log(\"NEAREST: \" + this.delFracInstance.delaunayPoints[nearestIndex])\r\n        points.push(this.delFracInstance.delaunayPoints[nearestIndex])\r\n        console.log(\"DIRECTION \" + direction)\r\n\r\n        let nextPv: plainVertex;\r\n        let founded = false;\r\n        let firstDir = false;\r\n        while (!founded) {\r\n            let last = points[points.length - 1]\r\n            let actualLinks = last.links\r\n            let indBestFit = this.findClosestAngle(this.getRelativeAngle(new Vec2(0, 1), direction), actualLinks)\r\n            if (indBestFit == null) {\r\n                console.log(\"indBestFit null\")\r\n                return false;\r\n            }\r\n            //  nextPv = findClosest(new Vec2(actualLinks[indBestFit].x, actualLinks[indBestFit].y), fracture.delaunayPoints)\r\n            let closesdtIndex = this.findClosestIndex(actualLinks[indBestFit], this.delFracInstance.delaunayPoints)\r\n            nextPv = this.delFracInstance.delaunayPoints[closesdtIndex];\r\n            if (nextPv == null) {\r\n                console.log(\"ACTUAL LINKS\")\r\n                console.log(actualLinks)\r\n                console.log(\"CLOSEST INDEX: \" + closesdtIndex)\r\n                console.log(\"indBestFit: \" + indBestFit)\r\n                console.log(\"nextPV null\")\r\n                console.log(this.delFracInstance.delaunayPoints)\r\n                return false;\r\n            }\r\n            console.log(\"PROMEDIAR DIR\")\r\n            if(!firstDir) {\r\n                console.log(\"FIRST DIRECTION \" + direction)\r\n                firstDir=true;\r\n                direction= this.promediardireccion(direction,new Vec2(nextPv.x,nextPv.y))\r\n                console.log(\"NEW DIRECTION \" + direction)\r\n            }\r\n        \r\n            points.push(nextPv)\r\n            if (nextPv.border) founded = true;\r\n        }\r\n\r\n\r\n        let aIndex = this.findClosestIndex(points[0], this.delFracInstance.delaunayPoints)\r\n        let bIndex = this.findClosestIndex(points[points.length - 1], this.delFracInstance.delaunayPoints)\r\n        console.log(\"FRACTURAAAA!!!!!!!!\")\r\n        console.log(points)\r\n        this.delFracInstance.setPointA(aIndex)\r\n        this.delFracInstance.setPointB(bIndex)\r\n        if (aIndex > bIndex) {\r\n            console.log(\"REVIRTIENDO\")\r\n            this.delFracInstance.setPointB(aIndex)\r\n            this.delFracInstance.setPointA(bIndex)\r\n            this.reverse(points)\r\n        }\r\n        this.delFracInstance.setFracturePts(points);\r\n        return true;\r\n    }\r\n\r\n    promediardireccion(vecA: Vec2 , vecB: Vec2 ){\r\n        return this.unitaryVector(new Vec2(0,0), new Vec2(vecB.x-vecA.x,vecB.y-vecA.y));\r\n\r\n    }\r\n\r\n    getRelativeAngle(vecA: Vec2, vecB: Vec2) {\r\n        let rads = this.getRads(vecA)\r\n        // console.log(\"BASE ANGLE: \"+rads)\r\n        let transformedVectorB = new Vec2(vecB.x * Math.cos(rads) + vecB.y * Math.sin(rads), -1 * vecB.x * Math.sin(rads) + vecB.y * Math.cos(rads));\r\n        // console.log(\"TRANSFORMED VECTOR: \"+ transformedVectorB)\r\n        return this.getRads(transformedVectorB);\r\n\r\n    }\r\n    getRads(vecA: Vec2) {\r\n        const constPI = 3.14159265359\r\n        if (vecA.x < 0.001 && vecA.x > -0.001) {\r\n            if (vecA.y > 0) { return constPI / 2 } else { return constPI * (3 / 2) }\r\n        }\r\n        if (vecA.y < 0.001 && vecA.y > -0.001) {\r\n            if (vecA.x > 0) { return 0 } else { return constPI }\r\n        }\r\n        let baseAngle = Math.abs(Math.atan((vecA.y) / (vecA.x)))\r\n        if (vecA.x < 0 && vecA.y > 0) baseAngle += constPI / 2\r\n        if (vecA.x < 0 && vecA.y < 0) baseAngle += constPI\r\n        if (vecA.x > 0 && vecA.y < 0) baseAngle += constPI * (3 / 2)\r\n        return baseAngle\r\n\r\n    }\r\n    reverse(pVs: plainVertex[]) {\r\n        for (let index = 0; index < pVs.length / 2; index++) {\r\n            let element = pVs[index];\r\n            pVs[index] = pVs[pVs.length - 1 - index];\r\n            pVs[pVs.length - 1 - index] = element;\r\n        }\r\n    }\r\n    /*\r\n    function findClosest(pos: Vec2, pVs: plainVertex[]) {\r\n        for (let index = 0; index < pVs.length; index++) {\r\n            const element = pVs[index];\r\n            if (element.x == pos.x && element.y == pos.y) {\r\n                return element\r\n            }\r\n        }\r\n    }\r\n    */\r\n    findClosestIndex(pos: Vec2, pVs: plainVertex[]) {\r\n        // console.log(\"POSX: \"+pos.x + \" POSY: \"+pos.y)\r\n        for (let index = 0; index < pVs.length; index++) {\r\n            let element = pVs[index];\r\n            //   console.log(\"ELEMENT: \"+element)\r\n            if (Math.abs(element.x - pos.x) < 0.001 && Math.abs(element.y - pos.y) < 0.001) {\r\n                // console.log(\"COINCIDE\")\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    findClosestAngle(angle: number, linkNodes: linkNode[]) {\r\n        const PI = 3.141592654\r\n        let minAngle = PI * 2;\r\n        let index = 0;\r\n        for (let i = 0; i < linkNodes.length; i++) {\r\n            if (linkNodes[i] == null) return null;\r\n            let diff = Math.abs(angle - linkNodes[i]._angle)\r\n            if (diff > (3 / 2) * PI) { diff = (2 * PI - diff) }\r\n            if (diff < minAngle) {\r\n                minAngle = diff;\r\n                index = i;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    unitaryVector(posA: Vec2, posB: Vec2) {\r\n        let length = this.lengthVector(posA, posB);\r\n        return new Vec2((posB.x - posA.x) / length, (posB.y - posA.y) / length);\r\n    }\r\n\r\n\r\n    isBorder(point: Vec2, pVs: plainVertex[]) {\r\n        let isBorder = false;\r\n        pVs.forEach(el => {\r\n            if (el.border) {\r\n                if (point.x == el.x && point.y == el.y) {\r\n                    isBorder = true;\r\n                }\r\n            }\r\n        })\r\n        return isBorder\r\n    }\r\n\r\n\r\n    lengthVector(a: Vec2, b: Vec2) {\r\n        return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n    }\r\n\r\n\r\n    getFracturable() {\r\n        let ret: plainVertex[][] = [];\r\n        // findFracture(fracture)\r\n        const internals = this.deepCopy(this.delFracInstance.delaunayPoints, false);\r\n        let partA: plainVertex[] = []\r\n        let partB: plainVertex[] = []\r\n        const externals = this.deepCopy(this.delFracInstance.delaunayPoints, true);\r\n        console.log(\"INTERNALS\")\r\n        console.log(internals)\r\n        console.log(\"EXTERNALS\")\r\n        console.log(externals)\r\n\r\n        // NO OLVIDAR EL TEMA DE SI TOCA EL PRIMER VERTICE!!!!\r\n        let i = 0\r\n        let continuar = true;\r\n        while (continuar) {\r\n\r\n            if (i == this.delFracInstance.getPointA()) {\r\n                this.delFracInstance.fracturePoints.forEach(element => {\r\n                    let k = this.cloneVertexPlain(element)\r\n                    k.border = true;\r\n                    partA.push(k)\r\n                });\r\n\r\n                for (let j = this.delFracInstance.getPointA(); j <= this.delFracInstance.getPointB() - 1; j++) {\r\n                    partB.push(this.cloneVertexPlain(externals[j]));\r\n                }\r\n                for (let j = this.delFracInstance.fracturePoints.length - 1; j > 0; j--) {\r\n                    let k = this.cloneVertexPlain(this.delFracInstance.fracturePoints[j])\r\n                    k.border = true;\r\n                    partB.push(k)\r\n                }\r\n\r\n                i = this.delFracInstance.getPointB() + 1;\r\n                for (let index = i; index < externals.length; index++) {\r\n                    partA.push(this.cloneVertexPlain(externals[index]))\r\n                }\r\n                continuar = false;\r\n            }\r\n            if (continuar) partA.push(this.cloneVertexPlain(externals[i]))\r\n            i++\r\n        }\r\n        console.log(\"INTERNALS\")\r\n        console.log(internals)\r\n        if (partA.length > 3) {\r\n            internals.forEach(element => {\r\n                partA.push(this.cloneVertexPlain(element))\r\n            });\r\n        }\r\n\r\n        if (partB.length) {\r\n            internals.forEach(element => {\r\n                partB.push(this.cloneVertexPlain(element))\r\n\r\n            });\r\n        }\r\n        console.log(\">>PART A\")\r\n        let before = this.deepCopy(this.delFracInstance.delaunayPoints, true);\r\n        console.log(\"BEFORE ( only externals\")\r\n        console.log(before)\r\n        this.removeOutRunners(partA)\r\n        console.log(partA)\r\n\r\n        //  console.log(\"AFTER\")\r\n        // console.log(partA)\r\n        console.log(\">>PART B\")\r\n        this.removeOutRunners(partB)\r\n        console.log(partB)\r\n        ret.push(partA)\r\n        ret.push(partB)\r\n        return ret;\r\n    }\r\n\r\n    removeOutRunners(verts: plainVertex[]) {\r\n        let cant = 0;\r\n        while (verts[cant] != null && verts[cant].border) {\r\n            cant++;\r\n        }\r\n        for (let j = 0; j < cant; ++j) {\r\n            // console.log(\"===============================================================\")\r\n            let a = verts[j];\r\n            let b = verts[0];\r\n            let c = verts[j - 1];\r\n            if (j < cant - 1) b = verts[j + 1];\r\n            if (j == 0) c = verts[cant - 1]\r\n            let v1 = this.unitaryVector(a, b)\r\n            let v2 = this.unitaryVector(a, c)\r\n            let maxAngle = this.getRelativeAngle(v1, v2)\r\n            //    console.log(\"POS  x: \"+a.x+\"  y: \"+a.y)\r\n            //     console.log(\"V1: x: \"+v1.x+\"  y: \"+v1.y)\r\n            //    console.log(\"V2: x: \"+v2.x+\"  y: \"+v2.y)\r\n            //  console.log(\"MAX ANGLE: \"+maxAngle)\r\n            if (a.links.length > 0) {\r\n                for (let k = 0; k < a.links.length; k++) {\r\n                    if (a.links[k] != null) {\r\n                        v2 = this.unitaryVector(a, a.links[k])\r\n                        // console.log(\"LOCAL V2: x: \"+v2.x+\"  y: \"+v2.y)\r\n                        let angle = this.getRelativeAngle(v1, v2)\r\n                        //    console.log(\"A LINK item  x: \"+a.links[k].x+\"   y: \"+a.links[k].y)\r\n                        //  console.log(angle)\r\n\r\n                        if (angle >= maxAngle || angle == 0) {\r\n                            a.links[k] = null;\r\n                            //    console.log(\"REMOVE\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.filterNulls(a.links)\r\n        }\r\n    }\r\n\r\n    filterNulls(elementsArr: any[]) {\r\n        for (let i = 0; i < elementsArr.length; i++) {\r\n            if (elementsArr[i] == null) {\r\n                for (let j = i + 1; j < elementsArr.length; j++) {\r\n                    if (elementsArr[j] != null) {\r\n                        elementsArr[i] = elementsArr[j];\r\n                        elementsArr[j] = null;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = elementsArr.length - 1; i > 0; i--) {\r\n            if (elementsArr[i] == null) elementsArr.pop();\r\n        }\r\n    }\r\n\r\n    deepCopy(pv: plainVertex[], externalBorder: boolean) {\r\n        let output: plainVertex[] = [];\r\n        pv.forEach(pv_el => {\r\n            if (pv_el.border == externalBorder) {\r\n                let newPv = new plainVertex(pv_el.x, pv_el.y, pv_el.border);\r\n                let newLinkNodes: linkNode[] = [];\r\n\r\n                pv_el.links.forEach(ln => {\r\n                    if (ln != null) {\r\n                        let newlinkNode = new linkNode(ln.x, ln.y, ln._angle);\r\n                        newLinkNodes.push(newlinkNode)\r\n                    }\r\n                });\r\n\r\n                newPv.links = newLinkNodes\r\n                output.push(newPv)\r\n            }\r\n        });\r\n        return output;\r\n    }\r\n    cloneVertexPlain(ver: plainVertex) {\r\n        let newPv = new plainVertex(ver.x, ver.y, ver.border)\r\n        ver.links.forEach(element => {\r\n            if (element != null) {\r\n                let newLNode = new linkNode(element.x, element.y, this.roundValue(element._angle))\r\n                newPv.links.push(newLNode);\r\n            }\r\n        });\r\n        return newPv\r\n    }\r\n\r\n    roundValue(val: number) {\r\n        return (Math.round(val * 1000)) / 1000\r\n    }\r\n\r\n\r\n    calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n        let area = 0;\r\n        for (let i = 0; i < indexes.length; i += jump) {\r\n            let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n            let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n            let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n            let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n            let triangleArea = Math.abs(this.cross(x1, y1, x2, y2) / 2)\r\n            area += triangleArea;\r\n        }\r\n        return area;\r\n    }\r\n    calcAproxArea(points: Vec2[]) {\r\n        let minX = Number.POSITIVE_INFINITY;\r\n        let maxX = Number.NEGATIVE_INFINITY;\r\n        let minY = Number.POSITIVE_INFINITY;\r\n        let maxY = Number.NEGATIVE_INFINITY;\r\n        points.forEach(e => {\r\n            if (e.x > maxX) maxX = e.x;\r\n            if (e.x < minX) minX = e.x;\r\n            if (e.y > maxY) maxY = e.y;\r\n            if (e.y < minY) minY = e.y;\r\n        });\r\n        return (maxX - minX) * (maxY - minY)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]}
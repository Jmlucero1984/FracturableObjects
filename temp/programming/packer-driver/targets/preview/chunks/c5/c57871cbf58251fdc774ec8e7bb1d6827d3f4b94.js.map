{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/DelaunaySplitter.ts"],"names":["plainVertex","linkNode","DelaunayFracture","ab_cross_ac","a","b","c","cross","x","y","rnd","Math","round","polygonToString","polygon","output","i","length","calculateCenterMass","poly","sumx","sumy","cant","forEach","element","Vec2","dot","x1","y1","x2","y2","isInPolygon","checkPoint","polygonPoints","counter","xinters","p1","p2","pointCount","min","max","invertVector","vec","findFracture","fracture","points","console","log","getDelaunayPoints","getContactPoint","direction","getNormal","nearestIndex","minDistance","distance","lengthVector","links","border","push","nextPv","founded","firstDir","last","actualLinks","indBestFit","findClosestAngle","closesdtIndex","findClosestIndex","promdireccion","aIndex","bIndex","setPointA","setPointB","reverse","getFracturePts","setFracturePts","vecA","vecB","unitaryVector","pVs","index","pos","abs","angle","linkNodes","PI","minAngle","diff","_angle","posA","posB","isBorder","point","el","sqrt","pow","getFracturable","ret","internals","deepCopy","partA","partB","externals","fractPoints","continuar","pointA","getPointA","pointB","getPointB","k","cloneVertexPlain","j","pv","externalBorder","pv_el","newPv","newLinkNodes","ln","newlinkNode","promediardireccion","ver","newLNode","roundValue","val","calculateEnvolArea","indexes","coords","jump","area","triangleArea","calcAproxArea","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","e","_decorator","getRelativeAngle","removeOutRunners","ccclass","property","constructor","ctPt","normal","envd","plainVertexs","contactPoint","fracturePoints","envolvent","extremePoints","delaunayPoints","setDelaunayPoints","dPoints","getExtremePoints","setExtremePoints","extPts","getEnvolvent","ptA","ptB","fctPts"],"mappings":"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","sourcesContent":["import { _decorator, Vec2, Vec3 } from 'cc';\r\nimport { filterNulls, getRelativeAngle, removeOutRunners } from './Delaunay';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport class plainVertex extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public border: boolean = false;\r\n    public links: linkNode[] = []\r\n    constructor(x: number, y: number, border: boolean = false) {\r\n        super();\r\n        \r\n        this.x = x;\r\n        this.y = y;\r\n        this.border = border;\r\n    }\r\n}\r\n\r\nexport class linkNode extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public _angle = 0;\r\n    constructor(x: number, y: number, angle: number) {\r\n        super();\r\n        this.x = x;\r\n        this.y = y;\r\n        this._angle = angle;\r\n    }\r\n}\r\n\r\nfunction ab_cross_ac(a, b, c) //The cross product of ab and ac\r\n{\r\n    return cross(b.x - a.x, b.y - a.y, c.x - a.x, c.y - a.y);\r\n}\r\n\r\nfunction rnd(x: number) {\r\n    return Math.round(x * 1000) / 1000;\r\n}\r\n\r\nexport function polygonToString(polygon: Vec2[]) {\r\n    let output: string = \"this.gr.moveTo(\" + rnd(polygon[0].x) + \",\" + rnd(polygon[0].y) + \");\"\r\n    for (let i = 1; i < polygon.length; i++) {\r\n        output += \"this.gr.lineTo(\" + rnd(polygon[i].x) + \",\" + rnd(polygon[i].y) + \");\"\r\n    }\r\n    output += \"this.gr.close();\"\r\n}\r\n\r\n\r\nfunction calculateCenterMass(poly: Vec2[]) {\r\n    let sumx = 0;\r\n    let sumy = 0;\r\n    let cant = poly.length;\r\n    poly.forEach(element => {\r\n        sumx += element.x;\r\n        sumy += element.y;\r\n    });\r\n    return new Vec2(sumx / cant, sumy / cant);\r\n}\r\nfunction dot(x1, y1, x2, y2) {\r\n    return x1 * x2 + y1 * y2;\r\n}\r\nfunction cross(x1, y1, x2, y2) {\r\n    return x1 * y2 - x2 * y1;\r\n}\r\n\r\n\r\nexport function isInPolygon(checkPoint: Vec2, polygonPoints: Vec2[]) {\r\n    var counter = 0;\r\n    var i: number;\r\n    var xinters;\r\n    var p1: Vec2, p2: Vec2;\r\n    var pointCount = polygonPoints.length;\r\n    p1 = polygonPoints[0];\r\n    for (i = 1; i <= pointCount; i++) {\r\n        p2 = polygonPoints[i % pointCount];\r\n        if (checkPoint.x > Math.min(p1.x, p2.x) && checkPoint.x <= Math.max(p1.x, p2.x)) {\r\n            if (checkPoint.y <= Math.max(p1.y, p2.y)) {\r\n                if (p1.x != p2.x) {\r\n                    xinters = (checkPoint.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;\r\n                    if (p1.y == p2.y || checkPoint.y <= xinters) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        p1 = p2;\r\n    }\r\n    if (counter % 2 == 0) { return false; }\r\n    return true;\r\n}\r\n\r\nexport class DelaunayFracture {\r\n    private contactPoint: Vec2;\r\n    private normal: Vec2;\r\n    private  pointA: number;\r\n    private pointB: number;\r\n    private  fracturePoints: plainVertex[];\r\n    private envolvent: Vec2[];\r\n    private extremePoints: Vec2[];\r\n    private delaunayPoints: plainVertex[];\r\n    public constructor(ctPt: Vec2, normal: Vec2, envd: Vec2[], plainVertexs: plainVertex[]) {\r\n        this.contactPoint = ctPt;\r\n        this.normal = normal;\r\n        this.envolvent = envd;\r\n        this.delaunayPoints = plainVertexs;\r\n    }\r\n    public getDelaunayPoints() { return this.delaunayPoints }\r\n    public setDelaunayPoints(dPoints: plainVertex[]) { this.delaunayPoints = dPoints }\r\n    public getPointA() { return this.pointA; }\r\n    public getExtremePoints() { return this.extremePoints; }\r\n    public setExtremePoints(extPts: Vec2[]) { this.extremePoints = extPts; }\r\n    public getPointB() { return this.pointB; }\r\n    public getNormal() { return this.normal; }\r\n    public getContactPoint() { return this.contactPoint; }\r\n    public getFracturePts() { return this.fracturePoints; }\r\n    public getEnvolvent() { return this.envolvent; }\r\n    public setPointA(ptA: number) { this.pointA = ptA; }\r\n    public setPointB(ptB: number) { this.pointB = ptB; }\r\n    public setFracturePts(fctPts: plainVertex[]) {\r\n        this.fracturePoints = fctPts;\r\n    }\r\n}\r\n\r\n\r\nfunction invertVector(vec: Vec2) {\r\n    return new Vec2(-1 * vec.x, -1 * vec.y)\r\n}\r\n\r\n\r\nexport function findFracture(fracture: DelaunayFracture) {\r\n    let points: plainVertex[] = [];\r\n    console.log(\"DEL FRACT CATN DE PUNTOS\")\r\n  \r\n    console.log(fracture.getDelaunayPoints().length);\r\n    console.log(\"POINTS\")\r\n    console.log(fracture.getDelaunayPoints())\r\n    console.log(\"CONTACT POINT\")\r\n    console.log(fracture.getContactPoint())\r\n    let direction = invertVector(fracture.getNormal());\r\n    console.log(\"DIRECTION\")\r\n    console.log(direction)\r\n    let nearestIndex = 0;\r\n    let minDistance = 10000;\r\n    for (let i = 0; i < fracture.getDelaunayPoints().length; i++) {\r\n        let element = fracture.getDelaunayPoints()[i]\r\n        let distance = lengthVector(fracture.getContactPoint(), new Vec2(element.x, element.y))\r\n        if (distance < minDistance && element.links.length > 0 && element.border) {\r\n            minDistance = distance\r\n            nearestIndex = i;\r\n        }\r\n    }\r\n    points.push(fracture.getDelaunayPoints()[nearestIndex])\r\n\r\n    let nextPv:plainVertex;\r\n    let founded=false;\r\n    let firstDir=false;\r\n    while (!founded){\r\n        let last = points[points.length - 1]\r\n        let actualLinks = last.links\r\n        let indBestFit = findClosestAngle(getRelativeAngle(new Vec2(0, 1), direction), actualLinks)\r\n            if (indBestFit == null) {\r\n                return false;\r\n            }\r\n      let closesdtIndex=findClosestIndex(actualLinks[indBestFit],fracture.getDelaunayPoints())\r\n        nextPv =fracture.getDelaunayPoints()[closesdtIndex];\r\n            if (nextPv == null) {\r\n\r\n                return false;\r\n            }\r\n            console.log(\"PROMEDIAR DIR\")\r\n            if(!firstDir) {\r\n                console.log(\"FIRST DIRECTION \" + direction)\r\n                firstDir=true;\r\n                direction= promdireccion(direction,new Vec2(nextPv.x,nextPv.y))\r\n                console.log(\"NEW DIRECTION \" + direction)\r\n            } \r\n        points.push(nextPv)\r\n        if(nextPv.border) founded=true;\r\n    }\r\n\r\n     \r\n    let aIndex = findClosestIndex(points[0], fracture.getDelaunayPoints())\r\n    let bIndex = findClosestIndex(points[points.length - 1], fracture.getDelaunayPoints())\r\n    console.log(\"FRACTURAAAA!!!!!!!!\")\r\n    console.log(points)\r\n    fracture.setPointA(aIndex)\r\n    fracture.setPointB(bIndex)\r\n    if (aIndex > bIndex) {\r\n        console.log(\"REVIRTIENDO\")\r\n        fracture.setPointB(aIndex)\r\n        fracture.setPointA(bIndex)\r\n        reverse(points)\r\n    }\r\n    console.log(\"FRACTURA POINTS: \")\r\n    console.log( fracture.getFracturePts)\r\n    fracture.setFracturePts(points);\r\n    return true;\r\n}\r\n function promdireccion(vecA: Vec2 , vecB: Vec2 ){\r\n        return  unitaryVector(new Vec2(0,0), new Vec2(vecB.x-vecA.x,vecB.y-vecA.y));\r\n\r\n    }\r\n \r\nfunction reverse(pVs: plainVertex[]) {\r\n    for (let index = 0; index < pVs.length / 2; index++) {\r\n        let element = pVs[index];\r\n        pVs[index] = pVs[pVs.length - 1 - index];\r\n        pVs[pVs.length - 1 - index] = element;\r\n    }\r\n}\r\n\r\nfunction findClosestIndex(pos: Vec2, pVs: plainVertex[]) {\r\n    for (let index = 0; index < pVs.length; index++) {\r\n       let element = pVs[index];\r\n        if (Math.abs(element.x- pos.x)<0.001 && Math.abs(element.y-pos.y)<0.001) {\r\n            return index;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function findClosestAngle(angle: number, linkNodes: linkNode[]) {\r\n    const PI = 3.141592654\r\n    let minAngle = PI * 2;\r\n    let index = 0;\r\n    for (let i = 0; i < linkNodes.length; i++) {\r\n        if (linkNodes[i] == null) return null;\r\n        let diff = Math.abs(angle - linkNodes[i]._angle)\r\n        if (diff > (3 / 2) * PI) { diff = (2 * PI - diff) }\r\n        if (diff < minAngle) {\r\n            minAngle = diff;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n\r\nfunction unitaryVector(posA: Vec2, posB: Vec2) {\r\n    let length = lengthVector(posA, posB);\r\n    return new Vec2((posB.x - posA.x) / length, (posB.y - posA.y) / length);\r\n}\r\n\r\n\r\nfunction isBorder(point: Vec2, pVs: plainVertex[]) {\r\n    let isBorder = false;\r\n    pVs.forEach(el => {\r\n        if (el.border) {\r\n            if (point.x == el.x && point.y == el.y) {\r\n                isBorder = true;\r\n            }\r\n        }\r\n    })\r\n    return isBorder\r\n}\r\n\r\n\r\nfunction lengthVector(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n}\r\n\r\n\r\n\r\nexport function getFracturable(fracture: DelaunayFracture) {\r\n \r\n    let ret: plainVertex[][] = [];\r\n    // findFracture(fracture)\r\n    const internals = deepCopy(fracture.getDelaunayPoints(),false);\r\n    let partA: plainVertex[] = []\r\n    let partB: plainVertex[] = []\r\n    const externals = deepCopy(fracture.getDelaunayPoints(),true);\r\n    let fractPoints = fracture.getFracturePts();\r\n\r\n    // NO OLVIDAR EL TEMA DE SI TOCA EL PRIMER VERTICE!!!!\r\n    let i = 0\r\n    let continuar = true;\r\n    let pointA = fracture.getPointA();\r\n    let pointB = fracture.getPointB();\r\n    while (continuar) {\r\n        \r\n        if (i ==pointA ) {\r\n            \r\n            fractPoints.forEach(element => {\r\n                let k = cloneVertexPlain(element)\r\n                k.border = true;\r\n                partA.push(k)\r\n            });\r\n          \r\n            for (let j = pointA; j <= pointB - 1; j++) {\r\n                partB.push(cloneVertexPlain(externals[j]));\r\n            }\r\n            for (let j = fractPoints.length - 1; j > 0; j--) {\r\n                let k = cloneVertexPlain(fractPoints[j])\r\n                k.border = true;\r\n                partB.push(k)\r\n            }\r\n\r\n            i = pointB + 1;\r\n            for (let index = i; index < externals.length; index++) {\r\n                partA.push(cloneVertexPlain(externals[index]))\r\n            }\r\n            continuar = false;\r\n        }\r\n       if(continuar) partA.push(cloneVertexPlain(externals[i]))\r\n        i++\r\n    }\r\n\r\n   if(partA.length>3) {\r\n    internals.forEach(element => {\r\n\r\n        partA.push(cloneVertexPlain(element))\r\n        \r\n   })}\r\n   if(partB.length>3) {\r\n    internals.forEach(element => {\r\n\r\n        partB.push(cloneVertexPlain(element))\r\n        \r\n   })}\r\n    removeOutRunners(partA)\r\n \r\n    removeOutRunners(partB)\r\n    ret.push(partA)\r\n    ret.push(partB)\r\n    return ret;\r\n}\r\n\r\n \r\n\r\nfunction deepCopy(pv: plainVertex[], externalBorder:boolean) {\r\n    let output: plainVertex[] = [];\r\n    pv.forEach(pv_el => {\r\n        if (pv_el.border==externalBorder) {\r\n            let newPv = new plainVertex(pv_el.x, pv_el.y, pv_el.border);\r\n            let newLinkNodes: linkNode[] = [];\r\n     \r\n            pv_el.links.forEach(ln => {\r\n                if(ln!=null){\r\n                let newlinkNode = new linkNode(ln.x, ln.y, ln._angle);\r\n                newLinkNodes.push(newlinkNode)\r\n                }\r\n            });\r\n        \r\n            newPv.links = newLinkNodes\r\n            output.push(newPv)\r\n        }\r\n    });\r\n    return output;\r\n}\r\n \r\n\r\nfunction promediardireccion(vecA: Vec2 , vecB: Vec2 ){\r\n    return unitaryVector(new Vec2(0,0), new Vec2(vecB.x-vecA.x,vecB.y-vecA.y));\r\n\r\n}\r\n\r\nfunction cloneVertexPlain(ver: plainVertex) {\r\n    let newPv = new plainVertex(ver.x, ver.y, ver.border)\r\n    ver.links.forEach(element => {\r\n        if(element!=null){\r\n        let newLNode = new linkNode(element.x, element.y, roundValue(element._angle))\r\n        newPv.links.push(newLNode);\r\n        }\r\n    });\r\n    return newPv\r\n}\r\n\r\nfunction roundValue(val: number) {\r\n    return (Math.round(val * 1000)) / 1000\r\n}\r\n\r\n\r\nexport function calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n    let area = 0;\r\n    for (let i = 0; i < indexes.length; i += jump) {\r\n        let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n        let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n        let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let triangleArea = Math.abs(cross(x1, y1, x2, y2) / 2)\r\n        area += triangleArea;\r\n    }\r\n    return area;\r\n}\r\nexport function calcAproxArea(points: Vec2[]) {\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    points.forEach(e => {\r\n        if (e.x > maxX) maxX = e.x;\r\n        if (e.x < minX) minX = e.x;\r\n        if (e.y > maxY) maxY = e.y;\r\n        if (e.y < minY) minY = e.y;\r\n    });\r\n    return (maxX - minX) * (maxY - minY)\r\n}\r\n"]}
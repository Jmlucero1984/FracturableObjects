{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/DelaunaySplitter.ts"],"names":["plainVertex","linkNode","DelaunayFracture","ab_cross_ac","a","b","c","cross","x","y","rnd","Math","round","polygonToString","polygon","output","i","length","calculateCenterMass","poly","sumx","sumy","cant","forEach","element","Vec2","dot","x1","y1","x2","y2","isInPolygon","checkPoint","polygonPoints","counter","xinters","p1","p2","pointCount","min","max","invertVector","vec","findFracture","fracture","points","console","log","getDelaunayPoints","size","getContactPoint","direction","getNormal","nearestIndex","minDistance","distance","lengthVector","links","border","add","nextPv","founded","firstDir","last","actualLinks","indBestFit","findClosestAngle","closesdtIndex","findClosestIndex","redireccion","aIndex","bIndex","setPointA","setPointB","reverse","getFracturePts","setFracturePts","vecA","vecB","unitaryVector","pVs","index","pos","abs","angle","linkNodes","PI","minAngle","diff","_angle","posA","posB","isBorder","point","el","sqrt","pow","getFracturable","ret","internals","deepCopy","partA","Set","partB","externals","fractPoints","continuar","pointA","getPointA","pointB","getPointB","k","cloneVertexPlain","j","push","pv","externalBorder","pv_el","newPv","newLinkNodes","ln","newlinkNode","promediardireccion","ver","newLNode","roundValue","val","calculateEnvolArea","indexes","coords","jump","area","triangleArea","calcAproxArea","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","e","_decorator","getRelativeAngle","removeOutRunners","ccclass","property","constructor","ctPt","normal","envd","plainVertexs","contactPoint","fracturePoints","envolvent","extremePoints","delaunayPoints","setDelaunayPoints","dPoints","getExtremePoints","setExtremePoints","extPts","getEnvolvent","ptA","ptB","fctPts"],"mappings":"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","sourcesContent":["import { _decorator, Vec2, Vec3 } from 'cc';\r\nimport { filterNulls, getRelativeAngle, removeOutRunners } from './Delaunay';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport class plainVertex extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public border: boolean = false;\r\n    public links: linkNode[] = []\r\n    constructor(x: number, y: number, border: boolean = false) {\r\n        super();\r\n        \r\n        this.x = x;\r\n        this.y = y;\r\n        this.border = border;\r\n    }\r\n}\r\n\r\nexport class linkNode extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public _angle = 0;\r\n    constructor(x: number, y: number, angle: number) {\r\n        super();\r\n        this.x = x;\r\n        this.y = y;\r\n        this._angle = angle;\r\n    }\r\n}\r\n\r\nfunction ab_cross_ac(a, b, c) //The cross product of ab and ac\r\n{\r\n    return cross(b.x - a.x, b.y - a.y, c.x - a.x, c.y - a.y);\r\n}\r\n\r\nfunction rnd(x: number) {\r\n    return Math.round(x * 1000) / 1000;\r\n}\r\n\r\nexport function polygonToString(polygon: Vec2[]) {\r\n    let output: string = \"this.gr.moveTo(\" + rnd(polygon[0].x) + \",\" + rnd(polygon[0].y) + \");\"\r\n    for (let i = 1; i < polygon.length; i++) {\r\n        output += \"this.gr.lineTo(\" + rnd(polygon[i].x) + \",\" + rnd(polygon[i].y) + \");\"\r\n    }\r\n    output += \"this.gr.close();\"\r\n}\r\n\r\n\r\nfunction calculateCenterMass(poly: Vec2[]) {\r\n    let sumx = 0;\r\n    let sumy = 0;\r\n    let cant = poly.length;\r\n    poly.forEach(element => {\r\n        sumx += element.x;\r\n        sumy += element.y;\r\n    });\r\n    return new Vec2(sumx / cant, sumy / cant);\r\n}\r\nfunction dot(x1, y1, x2, y2) {\r\n    return x1 * x2 + y1 * y2;\r\n}\r\nfunction cross(x1, y1, x2, y2) {\r\n    return x1 * y2 - x2 * y1;\r\n}\r\n\r\n\r\nexport function isInPolygon(checkPoint: Vec2, polygonPoints: Vec2[]) {\r\n    var counter = 0;\r\n    var i: number;\r\n    var xinters;\r\n    var p1: Vec2, p2: Vec2;\r\n    var pointCount = polygonPoints.length;\r\n    p1 = polygonPoints[0];\r\n    for (i = 1; i <= pointCount; i++) {\r\n        p2 = polygonPoints[i % pointCount];\r\n        if (checkPoint.x > Math.min(p1.x, p2.x) && checkPoint.x <= Math.max(p1.x, p2.x)) {\r\n            if (checkPoint.y <= Math.max(p1.y, p2.y)) {\r\n                if (p1.x != p2.x) {\r\n                    xinters = (checkPoint.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;\r\n                    if (p1.y == p2.y || checkPoint.y <= xinters) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        p1 = p2;\r\n    }\r\n    if (counter % 2 == 0) { return false; }\r\n    return true;\r\n}\r\n\r\nexport class DelaunayFracture {\r\n    private contactPoint: Vec2;\r\n    private normal: Vec2;\r\n    private  pointA: number;\r\n    private pointB: number;\r\n    private  fracturePoints: Set<plainVertex>;\r\n    private envolvent: Vec2[];\r\n    private extremePoints: Vec2[];\r\n    private delaunayPoints: Set<plainVertex>;\r\n    public constructor(ctPt: Vec2, normal: Vec2, envd: Vec2[], plainVertexs: Set<plainVertex>) {\r\n        this.contactPoint = ctPt;\r\n        this.normal = normal;\r\n        this.envolvent = envd;\r\n        this.delaunayPoints = plainVertexs;\r\n    }\r\n    public getDelaunayPoints() { return this.delaunayPoints }\r\n    public setDelaunayPoints(dPoints: Set<plainVertex>) { this.delaunayPoints = dPoints }\r\n    public getPointA() { return this.pointA; }\r\n    public getExtremePoints() { return this.extremePoints; }\r\n    public setExtremePoints(extPts: Vec2[]) { this.extremePoints = extPts; }\r\n    public getPointB() { return this.pointB; }\r\n    public getNormal() { return this.normal; }\r\n    public getContactPoint() { return this.contactPoint; }\r\n    public getFracturePts() { return this.fracturePoints; }\r\n    public getEnvolvent() { return this.envolvent; }\r\n    public setPointA(ptA: number) { this.pointA = ptA; }\r\n    public setPointB(ptB: number) { this.pointB = ptB; }\r\n    public setFracturePts(fctPts: Set<plainVertex>) {\r\n        this.fracturePoints = fctPts;\r\n    }\r\n}\r\n\r\n\r\nfunction invertVector(vec: Vec2) {\r\n    return new Vec2(-1 * vec.x, -1 * vec.y)\r\n}\r\n\r\n\r\nexport function findFracture(fracture: DelaunayFracture) {\r\n    let points: Set<plainVertex>\r\n    console.log(\"DEL FRACT CATN DE PUNTOS\")\r\n  \r\n    console.log(fracture.getDelaunayPoints().size);\r\n    console.log(\"POINTS\")\r\n    console.log(fracture.getDelaunayPoints())\r\n    console.log(\"CONTACT POINT\")\r\n    console.log(fracture.getContactPoint())\r\n    let direction = invertVector(fracture.getNormal());\r\n    console.log(\"DIRECTION\")\r\n    console.log(direction)\r\n    let nearestIndex = 0;\r\n    let minDistance = 10000;\r\n    for (let i = 0; i < fracture.getDelaunayPoints().size; i++) {\r\n        let element = fracture.getDelaunayPoints()[i]\r\n        let distance = lengthVector(fracture.getContactPoint(), new Vec2(element.x, element.y))\r\n        if (distance < minDistance && element.links.length > 0 && element.border) {\r\n            minDistance = distance\r\n            nearestIndex = i;\r\n        }\r\n    }\r\n    points.add(fracture.getDelaunayPoints()[nearestIndex])\r\n\r\n    let nextPv:plainVertex;\r\n    let founded=false;\r\n    let firstDir=false;\r\n    while (!founded){\r\n        let last = points[points.size - 1]\r\n        let actualLinks = last.links\r\n        let indBestFit = findClosestAngle(getRelativeAngle(new Vec2(0, 1), direction), actualLinks)\r\n            if (indBestFit == null) {\r\n                return false;\r\n            }\r\n      let closesdtIndex=findClosestIndex(actualLinks[indBestFit],fracture.getDelaunayPoints())\r\n        nextPv =fracture.getDelaunayPoints()[closesdtIndex];\r\n            if (nextPv == null) {\r\n\r\n                return false;\r\n            }\r\n            console.log(\"PROMEDIAR DIR\")\r\n            if(!firstDir) {\r\n                console.log(\"FIRST DIRECTION \" + direction)\r\n                firstDir=true;\r\n                direction= redireccion(points[0],new Vec2(nextPv.x,nextPv.y))\r\n                console.log(\"NEW DIRECTION \" + direction)\r\n            } \r\n        points.add(nextPv)\r\n        if(nextPv.border) founded=true;\r\n    }\r\n\r\n     \r\n    let aIndex = findClosestIndex(points[0], fracture.getDelaunayPoints())\r\n    let bIndex = findClosestIndex(points[points.size - 1], fracture.getDelaunayPoints())\r\n    console.log(\"FRACTURAAAA!!!!!!!!\")\r\n    console.log(points)\r\n    fracture.setPointA(aIndex)\r\n    fracture.setPointB(bIndex)\r\n    if (aIndex > bIndex) {\r\n        console.log(\"REVIRTIENDO\")\r\n        fracture.setPointB(aIndex)\r\n        fracture.setPointA(bIndex)\r\n        reverse(points)\r\n    }\r\n    console.log(\"FRACTURA POINTS: \")\r\n    console.log( fracture.getFracturePts)\r\n    fracture.setFracturePts(points);\r\n    return true;\r\n}\r\n function redireccion(vecA: Vec2 , vecB: Vec2 ){\r\n        return  unitaryVector(new Vec2(0,0), new Vec2(vecB.x-vecA.x,vecB.y-vecA.y));\r\n\r\n    }\r\n \r\nfunction reverse(pVs: Set<plainVertex>) {\r\n    for (let index = 0; index < pVs.size / 2; index++) {\r\n        let element = pVs[index];\r\n        pVs[index] = pVs[pVs.size - 1 - index];\r\n        pVs[pVs.size - 1 - index] = element;\r\n    }\r\n}\r\n\r\nfunction findClosestIndex(pos: Vec2, pVs: Set<plainVertex>) {\r\n    for (let index = 0; index < pVs.size; index++) {\r\n       let element = pVs[index];\r\n        if (Math.abs(element.x- pos.x)<0.001 && Math.abs(element.y-pos.y)<0.001) {\r\n            return index;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function findClosestAngle(angle: number, linkNodes: linkNode[]) {\r\n    const PI = 3.141592654\r\n    let minAngle = PI * 2;\r\n    let index = 0;\r\n    for (let i = 0; i < linkNodes.length; i++) {\r\n        if (linkNodes[i] == null) return null;\r\n        let diff = Math.abs(angle - linkNodes[i]._angle)\r\n        if (diff > (3 / 2) * PI) { diff = (2 * PI - diff) }\r\n        if (diff < minAngle) {\r\n            minAngle = diff;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n\r\nfunction unitaryVector(posA: Vec2, posB: Vec2) {\r\n    let length = lengthVector(posA, posB);\r\n    return new Vec2((posB.x - posA.x) / length, (posB.y - posA.y) / length);\r\n}\r\n\r\n\r\nfunction isBorder(point: Vec2, pVs: plainVertex[]) {\r\n    let isBorder = false;\r\n    pVs.forEach(el => {\r\n        if (el.border) {\r\n            if (point.x == el.x && point.y == el.y) {\r\n                isBorder = true;\r\n            }\r\n        }\r\n    })\r\n    return isBorder\r\n}\r\n\r\n\r\nfunction lengthVector(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n}\r\n\r\n\r\n\r\nexport function getFracturable(fracture: DelaunayFracture) {\r\n \r\n    let ret: Set<plainVertex>[] = [];\r\n    // findFracture(fracture)\r\n    const internals = deepCopy(fracture.getDelaunayPoints(),false);\r\n   // let partA: plainVertex[] = []\r\n   // let partB: plainVertex[] = []\r\n   let partA= new Set <plainVertex>();\r\n   let partB= new Set<plainVertex>();\r\n    const externals = deepCopy(fracture.getDelaunayPoints(),true);\r\n    let fractPoints = fracture.getFracturePts();\r\n\r\n    // NO OLVIDAR EL TEMA DE SI TOCA EL PRIMER VERTICE!!!!\r\n    let i = 0\r\n    let continuar = true;\r\n    let pointA = fracture.getPointA();\r\n    let pointB = fracture.getPointB();\r\n    while (continuar) {\r\n        \r\n        if (i ==pointA ) {\r\n            \r\n            fractPoints.forEach(element => {\r\n                let k = cloneVertexPlain(element)\r\n                k.border = true;\r\n                partA.add(k)\r\n            });\r\n          \r\n            for (let j = pointA; j <= pointB - 1; j++) {\r\n                partB.add(cloneVertexPlain(externals[j]));\r\n            }\r\n            for (let j = fractPoints.size - 1; j > 0; j--) {\r\n                let k = cloneVertexPlain(fractPoints[j])\r\n                k.border = true;\r\n                partB.add(k)\r\n            }\r\n\r\n            i = pointB + 1;\r\n            for (let index = i; index < externals.length; index++) {\r\n                partA.add(cloneVertexPlain(externals[index]))\r\n            }\r\n            continuar = false;\r\n        }\r\n       if(continuar) partA.add(cloneVertexPlain(externals[i]))\r\n        i++\r\n    }\r\n\r\n   if(partA.size>3) {\r\n    internals.forEach(element => {\r\n\r\n        partA.add(cloneVertexPlain(element))\r\n        \r\n   })}\r\n   if(partB.size>3) {\r\n    internals.forEach(element => {\r\n     \r\n        partB.add(cloneVertexPlain(element))\r\n        \r\n   })}\r\n    removeOutRunners(partA)\r\n \r\n    removeOutRunners(partB)\r\n    ret.push(partA)\r\n    ret.push(partB)\r\n    return ret;\r\n}\r\n\r\n \r\n\r\nfunction deepCopy(pv: Set<plainVertex>, externalBorder:boolean) {\r\n    let output: plainVertex[] = [];\r\n    pv.forEach(pv_el => {\r\n        if (pv_el.border==externalBorder) {\r\n            let newPv = new plainVertex(pv_el.x, pv_el.y, pv_el.border);\r\n            let newLinkNodes: linkNode[] = [];\r\n     \r\n            pv_el.links.forEach(ln => {\r\n                if(ln!=null){\r\n                let newlinkNode = new linkNode(ln.x, ln.y, ln._angle);\r\n                newLinkNodes.push(newlinkNode)\r\n                }\r\n            });\r\n        \r\n            newPv.links = newLinkNodes\r\n            output.push(newPv)\r\n        }\r\n    });\r\n    return output;\r\n}\r\n \r\n\r\nfunction promediardireccion(vecA: Vec2 , vecB: Vec2 ){\r\n    return unitaryVector(new Vec2(0,0), new Vec2(vecB.x-vecA.x,vecB.y-vecA.y));\r\n\r\n}\r\n\r\nfunction cloneVertexPlain(ver: plainVertex) {\r\n    let newPv = new plainVertex(ver.x, ver.y, ver.border)\r\n    ver.links.forEach(element => {\r\n        if(element!=null){\r\n        let newLNode = new linkNode(element.x, element.y, roundValue(element._angle))\r\n        newPv.links.push(newLNode);\r\n        }\r\n    });\r\n    return newPv\r\n}\r\n\r\nfunction roundValue(val: number) {\r\n    return (Math.round(val * 1000)) / 1000\r\n}\r\n\r\n\r\nexport function calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n    let area = 0;\r\n    for (let i = 0; i < indexes.length; i += jump) {\r\n        let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n        let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n        let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let triangleArea = Math.abs(cross(x1, y1, x2, y2) / 2)\r\n        area += triangleArea;\r\n    }\r\n    return area;\r\n}\r\nexport function calcAproxArea(points: Set<Vec2>) {\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    points.forEach(e => {\r\n        if (e.x > maxX) maxX = e.x;\r\n        if (e.x < minX) minX = e.x;\r\n        if (e.y > maxY) maxY = e.y;\r\n        if (e.y < minY) minY = e.y;\r\n    });\r\n    return (maxX - minX) * (maxY - minY)\r\n}\r\n"]}
{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/StaticFractureManager.ts"],"names":["Queue","_decorator","Component","instantiate","PolygonCollider2D","Vec2","Vec3","FractDelaunay","calcAproxArea","getFracturable","DelaunayAssemblerImplementer","ccclass","property","constructor","elements","head","tail","enqueue","element","dequeue","item","peek","length","isEmpty","StaticFractureManager","start","update","deltaTime","cola","working","console","log","createCopy","frac","parts","fractureObj","nodeF","node","a1","a2","recursiveness","pc","getComponent","points","index","border","push","x","y","delaunayPoints","apply","implementer","modifyPoints","stroke","copyOf","prefab","name","Math","random","cfwa","parent","points2","customLoad","setRotation","getRotation","setPosition","position","setTimeout","available"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Node, PolygonCollider2D, Vec2, Vec3 } from 'cc';\r\nimport { FractDelaunay } from './FractDelaunay';\r\nimport { calcAproxArea, getFracturable } from './DelaunaySplitter';\r\nimport { DelaunayAssemblerImplementer } from './DelaunayAssemblerImplementer';\r\nimport { earcut } from './earcut';\r\nconst { ccclass, property } = _decorator;\r\n\r\nclass Queue<T> {\r\n  \r\n    public constructor(\r\n        private elements: Record<number, T> = {},\r\n        private head: number = 0,\r\n        private tail: number = 0\r\n    ) { }\r\n\r\n    public enqueue(element: T): void {\r\n        this.elements[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    public dequeue(): T {\r\n        const item = this.elements[this.head];\r\n        delete this.elements[this.head];\r\n        this.head++;\r\n\r\n        return item;\r\n    }\r\n\r\n    public peek(): T {\r\n        return this.elements[this.head];\r\n    }\r\n\r\n    public get length(): number {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    public get isEmpty(): boolean {\r\n        return this.length === 0;\r\n    }\r\n\r\n}\r\n\r\n@ccclass('StaticFractureManager')\r\nexport class StaticFractureManager extends Component {\r\n    private static working=false;\r\n    public static cola:Queue<FractDelaunay> = new Queue<FractDelaunay>();\r\n    start() {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if(!StaticFractureManager.cola.isEmpty&&!StaticFractureManager.working) {\r\n            console.log(\"TENEMOS ALGO\")\r\n            StaticFractureManager.working=true;\r\n            StaticFractureManager.createCopy(StaticFractureManager.cola.dequeue());\r\n\r\n\r\n        }\r\n        \r\n    }\r\n    static createCopy(frac:FractDelaunay){\r\n        let parts = getFracturable(frac.fractureObj);\r\n        if (parts != null) {\r\n            let nodeF=frac.node;\r\n         \r\n            let a1 = calcAproxArea(parts[0])\r\n            let a2 = calcAproxArea(parts[1])\r\n            console.log(\"AREA 1: \"+a1);\r\n            console.log(\"AREA 2: \"+a2)\r\n\r\n        \r\n            if (/*a1>this.minArea && a2>this.minArea*/true) {\r\n                frac.recursiveness--;\r\n                let pc = nodeF.getComponent(PolygonCollider2D)\r\n                let points: Vec2[] = []\r\n                let index = 0;\r\n                while (index < parts[0].length && parts[0][index].border) {\r\n                    points.push(new Vec2(parts[0][index].x, parts[0][index].y))\r\n                    index++;\r\n                }\r\n             \r\n                frac.delaunayPoints = parts[0];\r\n                pc.points = points;\r\n                pc.apply();\r\n                frac.implementer.modifyPoints(points)\r\n               \r\n                frac.implementer.stroke();\r\n               \r\n \r\n                let copyOf = instantiate(frac.prefab)\r\n                copyOf.name=\"Instancia\"+Math.random()*1563813;\r\n                let cfwa = copyOf.getComponent(FractDelaunay)\r\n                cfwa.prefab = frac.prefab;\r\n            \r\n                copyOf.parent = nodeF.parent;\r\n                cfwa.delaunayPoints = parts[1];\r\n                let points2: Vec2[] = []\r\n                index = 0;\r\n                while (index < parts[1].length && parts[1][index].border) {\r\n                    points2.push(new Vec2(parts[1][index].x, parts[1][index].y))\r\n                    index++;\r\n                }\r\n              \r\n             \r\n                copyOf.getComponent(DelaunayAssemblerImplementer).customLoad(points2)\r\n         \r\n                //copyOf.getComponent(DelaunayAssemblerImplementer).markForUpdateRenderData();\r\n                cfwa.recursiveness = 3;\r\n                console.log(\"APPLYING POINTS\")\r\n                console.log(points2)\r\n                console.log(\"----\")\r\n                cfwa.customLoad(points2);\r\n        \r\n                //copyOf.getComponent(PolygonCollider2D).points=points2;\r\n              //  copyOf.getComponent(PolygonCollider2D).apply();\r\n                copyOf.setRotation(nodeF.getRotation());\r\n                copyOf.setPosition(new Vec3(nodeF.position.x, nodeF.position.y));\r\n                \r\n                \r\n                StaticFractureManager.working=false;\r\n            }\r\n        } else{\r\n            console.log(\"*******************************************************\")\r\n            console.log(\"*****************////  FALLÃ“   ////********************\")\r\n            console.log(\"*******************************************************\")\r\n        }\r\n        setTimeout(() => { frac.available = true; }, 0);\r\n    }\r\n}\r\n\r\n\r\n"]}
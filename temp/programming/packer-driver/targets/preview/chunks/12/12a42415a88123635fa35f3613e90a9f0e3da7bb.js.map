{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/GeneralManager.ts"],"names":["_decorator","Button","Component","director","EventHandler","instantiate","Label","Layers","Node","Prefab","RigidBody2D","tween","UITransform","v2","Vec3","BluePrintManager","Detonator","ccclass","property","GeneralManager","counter","detonator","detonators","nodeStruc","alreadyDetonated","structuralNodeList","bluePrintInitPos","bluePrintInitScale","bluePrintOn","bluePrintManager","scene","start","createClickEventHandler","target","component","handler","cstEventData","evtHandler","customEventData","onLoad","bluePrint","getComponent","setGeneralManager","getPosition","getScale","detonatorPref","realStructure","clickEventHandler","node","showPanelButton","clickEvents","push","clickDetonate","detonateButton","getScene","children","forEach","element","recursiveSearch","mainInfo","string","length","ResetDynamics","schedule","pointMap","i","j","getIdx","p","x","y","console","log","layer","nameToLayer","detonateAll","wakeUp","getTimeToDetonate","activated","showPanel","event","blockEvents","delay","by","scale","easing","position","call","tempIndex","getSiblingIndex","setSiblingIndex","mainContent","update","deltaTime","placeDetonator","relativePos","setTimeToDetonate","parent","dims","width","height","setPosition","sleep"],"mappings":"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":["import { _decorator, Button, Component, director, EventHandler, instantiate, Label, Layers, Node, Prefab, RigidBody, RigidBody2D, Scene, SortingLayers, Tween, tween, TweenAction, UITransform, v2, Vec2, Vec3 } from 'cc';\r\n\r\nimport { BluePrintManager } from './BluePrintManager';\r\nimport { Detonator } from './Detonator';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GeneralManager')\r\nexport class GeneralManager extends Component {\r\n\r\n    @property(Button)\r\n    public showPanelButton: Button\r\n\r\n\r\n    @property(Button)\r\n    public detonateButton: Button\r\n\r\n    @property(Node)\r\n    public bluePrint: Node = null;\r\n\r\n    @property(Node)\r\n    public mainContent: Node = null;\r\n\r\n    @property(Label)\r\n    public mainInfo: Label\r\n\r\n    @property(Node)\r\n    public realStructure: Node;\r\n    @property(Prefab)\r\n    public detonatorPref: Prefab;\r\n\r\n    private counter: number = 1.0;\r\n\r\n    private detonator;\r\n    private detonators: Node[] = [];\r\n    private nodeStruc: Node;\r\n    private alreadyDetonated = false;\r\n\r\n    private structuralNodeList: Node[] = [];\r\n    private bluePrintInitPos: Vec3;\r\n    private bluePrintInitScale: Vec3;\r\n    private bluePrintOn: boolean = false;\r\n    private bluePrintManager: BluePrintManager;\r\n    private scene: Scene;\r\n    start() {\r\n\r\n    }\r\n    createClickEventHandler(target:Node,component:string,handler:string, cstEventData:string){\r\n            let evtHandler= new EventHandler();\r\n            evtHandler.target=target;\r\n            evtHandler.component=component;\r\n            evtHandler.handler=handler;\r\n            evtHandler.customEventData=cstEventData;\r\n            return evtHandler;\r\n\r\n    }\r\n    onLoad(): void {\r\n\r\n        if (this.bluePrint != null) {\r\n            this.bluePrintManager = this.bluePrint.getComponent(BluePrintManager);\r\n            this.bluePrintManager.setGeneralManager(this)\r\n            this.bluePrintInitPos = this.bluePrint.getPosition();\r\n            this.bluePrintInitScale = this.bluePrint.getScale();\r\n        }\r\n        this.detonator = this.detonatorPref;\r\n        this.nodeStruc = this.realStructure;\r\n        const clickEventHandler = this.createClickEventHandler(this.node,\"GeneralManager\",\"showPanel\",\"\");\r\n        if (this.showPanelButton != null) {\r\n            this.showPanelButton.clickEvents.push(clickEventHandler);\r\n        }\r\n        const clickDetonate =  this.createClickEventHandler(this.node,\"GeneralManager\",\"detonateAll\",\"\");\r\n        if (this.detonateButton != null) {\r\n            this.detonateButton.clickEvents.push(clickDetonate);\r\n        }\r\n\r\n        this.scene = director.getScene();\r\n        this.scene.children.forEach(element => {\r\n            this.recursiveSearch(element);\r\n        });\r\n        this.mainInfo.string = \"Total de Elementos: \" + this.structuralNodeList.length;\r\n        this.ResetDynamics();\r\n\r\n        //CallBack,interval, repeat, delay\r\n        this.schedule(function () { this.ResetDynamics(); }, 2, 1, 1);\r\n\r\n        let pointMap: { [key: string]: number } = {};     // The mapping between point and idx\r\n        for (let i = 0; i < 6; i++) {\r\n            for (let j = 0; j < 6; j++) {\r\n          \r\n            pointMap[`${i}*${j}`] =i*j;\r\n            }\r\n        }\r\n        //const getIdx = (p: Vec2) => { return pointMap[`${p.x}-${p.y}`] }\r\n        const getIdx = (p: Vec2) => { return pointMap[`${p.x}*${p.y}`] }\r\n        for (let i = 2; i < 5; i++) {\r\n            for (let j = 1; j < 4; j++) {\r\n          console.log(\"Resultado mult \"+i+ \" * \"+j+\" : \"+getIdx(v2(i,j)));\r\n             \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n \r\n    recursiveSearch(node: Node) {\r\n        node.children.forEach(element => {\r\n            if (element.layer - 1 == Layers.nameToLayer(\"STRUC_ELEMENTS\")) {\r\n                this.structuralNodeList.push(element);\r\n            }\r\n            this.recursiveSearch(element);\r\n        });\r\n    }\r\n\r\n    detonateAll() {\r\n\r\n        if (this.alreadyDetonated) {\r\n            this.structuralNodeList = [];\r\n            this.scene.children.forEach(element => {\r\n                this.recursiveSearch(element);\r\n            });\r\n\r\n        }\r\n        this.alreadyDetonated = true;\r\n        this.structuralNodeList.forEach(element => {\r\n            if (element != null) {\r\n                element.getComponent(RigidBody2D).wakeUp();\r\n            }\r\n\r\n        });\r\n        this.detonators.forEach(element => {\r\n            if (element != null) {\r\n                console.log(\"TIME SETTED\" + element.getComponent(Detonator).getTimeToDetonate())\r\n                element.getComponent(Detonator).activated = true;\r\n            }\r\n\r\n        });\r\n        this.detonators = [];\r\n    }\r\n    showPanel(event: Event, customEventData: string) {\r\n\r\n        console.log(customEventData); // foobar\r\n        if (this.bluePrint != null) {\r\n            if (!this.bluePrintOn) {\r\n                this.bluePrintManager.blockEvents(false)\r\n                /*    export type TweenEasing = \"linear\" | \"smooth\" | \"fade\" | \"constant\" | \"quadIn\" | \"quadOut\" | \"quadInOut\" | \"quadOutIn\" | \"cubicIn\" | \"cubicOut\" | \"cubicInOut\" | \"cubicOutIn\" | \"quartIn\" | \"quartOut\" | \"quartInOut\" | \"quartOutIn\" | \"quintIn\" | \"quintOut\" | \"quintInOut\" | \"quintOutIn\" | \"sineIn\" | \"sineOut\" | \"sineInOut\" | \"sineOutIn\" | \"expoIn\" | \"expoOut\" | \"expoInOut\" | \"expoOutIn\" | \"circIn\" | \"circOut\" | \"circInOut\" | \"circOutIn\" | \"elasticIn\" | \"elasticOut\" | \"elasticInOut\" | \"elasticOutIn\" | \"backIn\" | \"backOut\" | \"backInOut\" | \"backOutIn\" | \"bounceIn\" | \"bounceOut\" | \"bounceInOut\" | \"bounceOutIn\";*/\r\n                tween(this.bluePrint).delay(0).by(1, { scale: new Vec3(0.5, 0.5, 0) }, { easing: 'sineIn' }).start();\r\n                tween(this.bluePrint).delay(0).by(1, { position: new Vec3(0, -370, 0) }, { easing: 'sineIn' }).call(() => {\r\n\r\n                }).start();\r\n\r\n                let tempIndex = this.bluePrint.getSiblingIndex()\r\n                this.bluePrint.setSiblingIndex(this.mainContent.getSiblingIndex());\r\n                this.mainContent.setSiblingIndex(tempIndex);\r\n                this.bluePrintOn = true;\r\n            }\r\n            else {\r\n                this.bluePrintManager.blockEvents(true)\r\n                tween(this.bluePrint).delay(0).by(1, { scale: new Vec3(-0.5, -0.5, 0) }, { easing: 'sineOut' }).start();\r\n                tween(this.bluePrint).delay(0).by(1, { position: new Vec3(0, 370, 0) }, { easing: 'sineOut' }).call(() => {\r\n                    console.log(\"CALLBACK CALLED\");\r\n                    let tempIndex = this.bluePrint.getSiblingIndex()\r\n                    this.bluePrint.setSiblingIndex(this.mainContent.getSiblingIndex());\r\n                    this.mainContent.setSiblingIndex(tempIndex);\r\n                }).start();\r\n                this.bluePrintOn = false;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n    placeDetonator(relativePos: Vec2) {\r\n        console.log(\"Detonator Placed\")\r\n        let node: Node = instantiate(this.detonator);\r\n        this.counter += 0.2;\r\n        node.getComponent(Detonator).setTimeToDetonate(this.counter)\r\n\r\n\r\n        node.parent = this.nodeStruc;\r\n        let dims = v2(this.nodeStruc.getComponent(UITransform).width, this.nodeStruc.getComponent(UITransform).height);\r\n        node.setPosition(dims.x * relativePos.x, dims.y * relativePos.y);\r\n        this.detonators.push(node);\r\n\r\n    }\r\n\r\n\r\n    ResetDynamics() {\r\n        this.mainInfo.string = \"RESET DYNAMICS\"\r\n        this.structuralNodeList.forEach(element => {\r\n            element.getComponent(RigidBody2D).sleep();\r\n\r\n        });\r\n    }\r\n}\r\n\r\n\r\n  /*\r\n    onClickReset() {\r\n        console.log(\"Tool -onClickReset\")\r\n        for (let i = 0; i < this.textures.length; i++) {\r\n            let center = this.getPolygonCenter(this.textures[i].polygon);\r\n            let dir = center.normalize();\r\n            tween(this.textures[i].node).by(0.5, { position: new Vec3(-dir.x * 100, -dir.y * 100, 0) }).call(() => {\r\n                if (i === this.textures.length - 1) {\r\n                    this.textureRoot.destroyAllChildren();\r\n                    this.textureRoot.removeAllChildren();\r\n                    this.textures = [];\r\n                    this.init();\r\n                }\r\n            }).start();\r\n        }\r\n    }\r\n\r\n\r\n\r\n     if (isWorld) {\r\n                let mat = texture.node.worldMatrix.clone().invert();\r\n                pa = pa.transformMat4(mat);\r\n                pb = pb.transformMat4(mat);\r\n            }\r\n\r\n\r\n\r\n\r\n    enum TextureType {\r\n    Cut,            // cut out\r\n    Stretch         // Stretch, not implemented yet\r\n}\r\nccenum(TextureType);\r\n\r\nlet _vec2_temp = new Vec2();\r\nlet _mat4_temp = new Mat4();\r\n\r\n@ccclass('SplitRender')\r\n@executeInEditMode\r\nexport class SplitRender extends Renderable2D {\r\n    static Type = TextureType;\r\n\r\n    @property({ type: SpriteFrame, serializable: true })\r\n    protected _spriteFrame: SpriteFrame | null = null;\r\n    @property({ type: SpriteFrame, serializable: true })\r\n\r\n\r\n\r\n\r\n\r\n      onLoad() {\r\n        this._renderEntity.setNode(this.node);\r\n        this.node['_hitTest'] = this._hitTest.bind(this);\r\n    }\r\n\r\n     profiler.hideStats();\r\n\r\n\r\n\r\n      this.graphics.node.setPosition(new Vec3(-view.getVisibleSize().width / 2, -view.getVisibleSize().height / 2));\r\n\r\n\r\n\r\nexport function splitPolygon(points: Vec2[]): number[] {\r\n   // console.log(\"Helper - Split poligon\") // Lo llama continuamente...\r\n    if (points.length <= 3) return [0, 1, 2];\r\n    let pointMap: { [key: string]: number } = {};     // The mapping between point and idx\r\n    for (let i = 0; i < points.length; i++) {\r\n        let p = points[i];\r\n        pointMap[`${p.x}-${p.y}`] = i;\r\n    }\r\n    const getIdx = (p: Vec2) => {\r\n        return pointMap[`${p.x}-${p.y}`]\r\n    }\r\n    points = points.concat([]);\r\n    let idxs: number[] = [];\r\n\r\n    let index = 0;\r\n    while (points.length > 3) {\r\n        let p1 = points[(index) % points.length]\r\n            , p2 = points[(index + 1) % points.length]\r\n            , p3 = points[(index + 2) % points.length];\r\n        let splitPoint = (index + 1) % points.length;\r\n\r\n        let v1: Vec2 = new Vec2();\r\n        Vec2.subtract(v1, p2, p1);\r\n        let v2: Vec2 = new Vec2();\r\n        Vec2.subtract(v2, p3, p2);\r\n\r\n        if (v1.cross(v2) < 0) {      // is a concave corner, look for the next\r\n            index = (index + 1) % points.length;\r\n            continue;\r\n        }\r\n        let hasPoint = false;\r\n        for (const p of points) {\r\n            if (p != p1 && p != p2 && p != p3 && isInTriangle(p, p1, p2, p3)) {\r\n                hasPoint = true;\r\n                break;\r\n            }\r\n        }\r\n        if (hasPoint) {      // The current triangle contains other points, find the next\r\n            index = (index + 1) % points.length;\r\n            continue;\r\n        }\r\n        // Found the ear, cut it off\r\n        idxs.push(getIdx(p1), getIdx(p2), getIdx(p3));\r\n        points.splice(splitPoint, 1);\r\n    }\r\n    for (const p of points) {\r\n        idxs.push(getIdx(p));\r\n    }\r\n    return idxs;\r\n}\r\n\r\n@property({ type: TextureType, serializable: true })\r\n    _type: TextureType = 0;\r\n    @property({ type: TextureType, serializable: true })\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    set type(val: TextureType) {\r\n        this._type = val;\r\n        this.markForUpdateRenderData();\r\n    }\r\n\r\n    @property\r\n    editing: boolean = false;\r\n\r\n    @property({ type: [Vec2], serializable: true })\r\n    _polygon: Vec2[] = [];\r\n    @property({ type: [Vec2], serializable: true })\r\n    public get polygon() {\r\n        return this._polygon;\r\n    }\r\n    public set polygon(points: Vec2[]) {\r\n        console.log(\"Helper.setPolygon\")\r\n        this._polygon = points;\r\n        this.markForUpdateRenderData();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n     constructor() {\r\n        super();\r\n    }\r\n\r\n    onLoad() {\r\n        this._renderEntity.setNode(this.node);\r\n        this.node['_hitTest'] = this._hitTest.bind(this);\r\n    }\r\n\r\n    _hitTest(cameraPt: Vec2) {\r\n        console.log(\"helper._hitTest\")\r\n        let node = this.node;\r\n        let testPt = _vec2_temp;\r\n\r\n        node.updateWorldTransform();\r\n        // If scale is 0, it can't be hit.\r\n        if (!Mat4.invert(_mat4_temp, node.worldMatrix)) {\r\n            return false;\r\n        }\r\n\r\n        Vec2.transformMat4(testPt, cameraPt, _mat4_temp);\r\n        return SplitHelper.isInPolygon(testPt, this.polygon);\r\n    }\r\n\r\n\r\n    \r\n    */\r\n\r\n"]}
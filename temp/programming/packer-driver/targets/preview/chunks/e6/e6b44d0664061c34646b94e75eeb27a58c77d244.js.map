{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/DelaunaySplitter.ts"],"names":["plainVertex","linkNode","DelaunayFracture","ab_cross_ac","a","b","c","cross","x","y","rnd","Math","round","polygonToString","polygon","output","i","length","calculateCenterMass","poly","sumx","sumy","cant","forEach","element","Vec2","dot","x1","y1","x2","y2","isInPolygon","checkPoint","polygonPoints","counter","xinters","p1","p2","pointCount","min","max","invertVector","vec","findFracture","fracture","points","direction","getNormal","nearestIndex","minDistance","getDelaunayPoints","distance","lengthVector","getContactPoint","links","border","push","nextPv","founded","firstDir","last","actualLinks","indBestFit","findClosestAngle","closesdtIndex","findClosestIndex","console","log","redireccion","aIndex","bIndex","setPointA","setPointB","reverse","getFracturePts","setFracturePts","vecA","vecB","nuevaDir","unitaryVector","getFracturable","ret","internals","deepCopy","partA","partB","externals","fractPoints","removeVertexs","continuar","pointA","getPointA","pointB","getPointB","k","cloneVertexPlain","j","index","targets","container","indexOfVertex","vt","vtArr","pVs","pos","abs","angle","linkNodes","PI","minAngle","diff","_angle","posA","posB","isBorder","point","el","sqrt","pow","pv","externalBorder","pv_el","newPv","newLinkNodes","ln","newlinkNode","promediardireccion","ver","newLNode","roundValue","val","calculateEnvolArea","indexes","coords","jump","area","triangleArea","calcAproxArea","minX","Number","POSITIVE_INFINITY","maxX","NEGATIVE_INFINITY","minY","maxY","e","_decorator","filterNulls","getRelativeAngle","removeOutRunners","ccclass","property","constructor","ctPt","normal","envd","plainVertexs","contactPoint","fracturePoints","envolvent","extremePoints","delaunayPoints","setDelaunayPoints","dPoints","getExtremePoints","setExtremePoints","extPts","getEnvolvent","ptA","ptB","fctPts"],"mappings":"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","sourcesContent":["import { _decorator, Vec2, Vec3 } from 'cc';\r\nimport { filterNulls, getRelativeAngle, removeOutRunners } from './Delaunay';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport class plainVertex extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public border: boolean = false;\r\n    public links: linkNode[] = []\r\n    constructor(x: number, y: number, border: boolean = false) {\r\n        super();\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.border = border;\r\n    }\r\n}\r\n\r\nexport class linkNode extends Vec2 {\r\n    public x = 0;\r\n    public y = 0;\r\n    public _angle = 0;\r\n    constructor(x: number, y: number, angle: number) {\r\n        super();\r\n        this.x = x;\r\n        this.y = y;\r\n        this._angle = angle;\r\n    }\r\n}\r\n\r\nfunction ab_cross_ac(a, b, c) //The cross product of ab and ac\r\n{\r\n    return cross(b.x - a.x, b.y - a.y, c.x - a.x, c.y - a.y);\r\n}\r\n\r\nfunction rnd(x: number) {\r\n    return Math.round(x * 1000) / 1000;\r\n}\r\n\r\nexport function polygonToString(polygon: Vec2[]) {\r\n    let output: string = \"this.gr.moveTo(\" + rnd(polygon[0].x) + \",\" + rnd(polygon[0].y) + \");\"\r\n    for (let i = 1; i < polygon.length; i++) {\r\n        output += \"this.gr.lineTo(\" + rnd(polygon[i].x) + \",\" + rnd(polygon[i].y) + \");\"\r\n    }\r\n    output += \"this.gr.close();\"\r\n}\r\n\r\n\r\nfunction calculateCenterMass(poly: Vec2[]) {\r\n    let sumx = 0;\r\n    let sumy = 0;\r\n    let cant = poly.length;\r\n    poly.forEach(element => {\r\n        sumx += element.x;\r\n        sumy += element.y;\r\n    });\r\n    return new Vec2(sumx / cant, sumy / cant);\r\n}\r\nfunction dot(x1, y1, x2, y2) {\r\n    return x1 * x2 + y1 * y2;\r\n}\r\nfunction cross(x1, y1, x2, y2) {\r\n    return x1 * y2 - x2 * y1;\r\n}\r\n\r\n\r\nexport function isInPolygon(checkPoint: Vec2, polygonPoints: Vec2[]) {\r\n    var counter = 0;\r\n    var i: number;\r\n    var xinters;\r\n    var p1: Vec2, p2: Vec2;\r\n    var pointCount = polygonPoints.length;\r\n    p1 = polygonPoints[0];\r\n    for (i = 1; i <= pointCount; i++) {\r\n        p2 = polygonPoints[i % pointCount];\r\n        if (checkPoint.x > Math.min(p1.x, p2.x) && checkPoint.x <= Math.max(p1.x, p2.x)) {\r\n            if (checkPoint.y <= Math.max(p1.y, p2.y)) {\r\n                if (p1.x != p2.x) {\r\n                    xinters = (checkPoint.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;\r\n                    if (p1.y == p2.y || checkPoint.y <= xinters) {\r\n                        counter++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        p1 = p2;\r\n    }\r\n    if (counter % 2 == 0) { return false; }\r\n    return true;\r\n}\r\n\r\nexport class DelaunayFracture {\r\n    private contactPoint: Vec2;\r\n    private normal: Vec2;\r\n    private pointA: number;\r\n    private pointB: number;\r\n    private fracturePoints: plainVertex[];\r\n    private envolvent: Vec2[];\r\n    private extremePoints: Vec2[];\r\n    private delaunayPoints: plainVertex[];\r\n    public constructor(ctPt: Vec2, normal: Vec2, envd: Vec2[], plainVertexs: plainVertex[]) {\r\n        this.contactPoint = ctPt;\r\n        this.normal = normal;\r\n        this.envolvent = envd;\r\n        this.delaunayPoints = plainVertexs;\r\n    }\r\n    public getDelaunayPoints() { return this.delaunayPoints }\r\n    public setDelaunayPoints(dPoints: plainVertex[]) { this.delaunayPoints = dPoints }\r\n    public getPointA() { return this.pointA; }\r\n    public getExtremePoints() { return this.extremePoints; }\r\n    public setExtremePoints(extPts: Vec2[]) { this.extremePoints = extPts; }\r\n    public getPointB() { return this.pointB; }\r\n    public getNormal() { return this.normal; }\r\n    public getContactPoint() { return this.contactPoint; }\r\n    public getFracturePts() { return this.fracturePoints; }\r\n    public getEnvolvent() { return this.envolvent; }\r\n    public setPointA(ptA: number) { this.pointA = ptA; }\r\n    public setPointB(ptB: number) { this.pointB = ptB; }\r\n    public setFracturePts(fctPts: plainVertex[]) {\r\n        this.fracturePoints = fctPts;\r\n    }\r\n}\r\n\r\n\r\nfunction invertVector(vec: Vec2) {\r\n    return new Vec2(-1 * vec.x, -1 * vec.y)\r\n}\r\n\r\n\r\nexport function findFracture(fracture: DelaunayFracture) {\r\n    let points: plainVertex[] = [];\r\n    /*\r\n    console.log(\"DEL FRACT CATN DE PUNTOS\")\r\n\r\n    console.log(fracture.getDelaunayPoints().length);\r\n    console.log(fracture.getDelaunayPoints())\r\n    console.log(\"POINTS\")\r\n    let ItemName = \"FRAC DELAUNAY POINT\"\r\n    fracture.getDelaunayPoints().forEach(el => {\r\n        console.log(ItemName + \"  x:\" + el.x + \"    y:\" + el.y)\r\n    })\r\n    console.log(\"CONTACT POINT\")\r\n    console.log(fracture.getContactPoint())\r\n    */\r\n    let direction = invertVector(fracture.getNormal());\r\n    let nearestIndex = 0;\r\n    let minDistance = 10000;\r\n    for (let i = 0; i < fracture.getDelaunayPoints().length; i++) {\r\n        let element = fracture.getDelaunayPoints()[i]\r\n        let distance = lengthVector(fracture.getContactPoint(), new Vec2(element.x, element.y))\r\n        if (distance < minDistance && element.links.length > 0 && element.border) {\r\n            minDistance = distance\r\n            nearestIndex = i;\r\n        }\r\n    }\r\n    points.push(fracture.getDelaunayPoints()[nearestIndex])\r\n\r\n    let nextPv: plainVertex;\r\n    let founded = false;\r\n    let firstDir = false;\r\n    while (!founded) {\r\n        let last = points[points.length - 1]\r\n        let actualLinks = last.links\r\n        let indBestFit = findClosestAngle(getRelativeAngle(new Vec2(0, 1), direction), actualLinks)\r\n        if (indBestFit == null) {\r\n            return false;\r\n        }\r\n        let closesdtIndex = findClosestIndex(actualLinks[indBestFit], fracture.getDelaunayPoints())\r\n        nextPv = fracture.getDelaunayPoints()[closesdtIndex];\r\n        if (nextPv == null) {\r\n\r\n            return false;\r\n        }\r\n        console.log(\"PROMEDIAR DIR\")\r\n        if (!firstDir) {\r\n            console.log(\"FIRST DIRECTION \" + direction)\r\n            firstDir = true;\r\n            direction = redireccion(points[0], new Vec2(nextPv.x, nextPv.y))\r\n            console.log(\"NEW DIRECTION \" + direction)\r\n        }\r\n        points.push(nextPv)\r\n        if (nextPv.border) founded = true;\r\n    }\r\n\r\n\r\n    let aIndex = findClosestIndex(points[0], fracture.getDelaunayPoints())\r\n    let bIndex = findClosestIndex(points[points.length - 1], fracture.getDelaunayPoints())\r\n    console.log(\"FRACTURA!!!\")\r\n    console.log(points)\r\n    fracture.setPointA(aIndex)\r\n    fracture.setPointB(bIndex)\r\n    if (aIndex > bIndex) {\r\n        console.log(\"REVIRTIENDO\")\r\n        fracture.setPointB(aIndex)\r\n        fracture.setPointA(bIndex)\r\n        reverse(points)\r\n    }\r\n    console.log(\"FRACTURA POINTS: \")\r\n    console.log(fracture.getFracturePts)\r\n    fracture.setFracturePts(points);\r\n    return true;\r\n}\r\n\r\n\r\n\r\nfunction redireccion(vecA: Vec2, vecB: Vec2) {\r\n    let nuevaDir=new Vec2(vecB.x-vecA.x,vecB.y-vecA.y);\r\n    console.log(\"NUEVA DIR: \"+nuevaDir)\r\n    return unitaryVector(new Vec2(0,0),nuevaDir);\r\n\r\n}\r\n\r\n\r\n\r\nexport function getFracturable(fracture: DelaunayFracture) {\r\n\r\n    let ret: plainVertex[][] = [];\r\n    // findFracture(fracture)\r\n    let internals = deepCopy(fracture.getDelaunayPoints(), false);\r\n\r\n    let partA: plainVertex[] = []\r\n    let partB: plainVertex[] = []\r\n    const externals = deepCopy(fracture.getDelaunayPoints(), true);\r\n    let fractPoints = fracture.getFracturePts();\r\n    removeVertexs(fractPoints, internals)\r\n    let i = 0\r\n    let continuar = true;\r\n    let pointA = fracture.getPointA();\r\n    let pointB = fracture.getPointB();\r\n    while (continuar) {\r\n\r\n        if (i == pointA) {\r\n\r\n            fractPoints.forEach(element => {\r\n                let k = cloneVertexPlain(element)\r\n                k.border = true;\r\n                partA.push(k)\r\n            });\r\n\r\n            for (let j = pointA; j <= pointB - 1; j++) {\r\n                partB.push(cloneVertexPlain(externals[j]));\r\n            }\r\n            for (let j = fractPoints.length - 1; j > 0; j--) {\r\n                let k = cloneVertexPlain(fractPoints[j])\r\n                k.border = true;\r\n                partB.push(k)\r\n            }\r\n\r\n            i = pointB + 1;\r\n            for (let index = i; index < externals.length; index++) {\r\n                partA.push(cloneVertexPlain(externals[index]))\r\n            }\r\n            continuar = false;\r\n        }\r\n        if (continuar) partA.push(cloneVertexPlain(externals[i]))\r\n        i++\r\n    }\r\n\r\n    if (partA.length > 3) {\r\n        internals.forEach(element => { partA.push(cloneVertexPlain(element)) })\r\n    }\r\n\r\n    if (partB.length > 3) {\r\n        internals.forEach(element => { partB.push(cloneVertexPlain(element)) })\r\n    }\r\n\r\n    removeOutRunners(partA)\r\n    removeOutRunners(partB)\r\n    if(partA.length>2&&partB.length>2) { \r\n\r\n    ret.push(partA)\r\n    ret.push(partB)\r\n    return ret}\r\n    else {\r\n        return null\r\n    }\r\n}\r\n\r\nfunction removeVertexs(targets: plainVertex[], container: plainVertex[]) {\r\n    for (let i = 0; i < targets.length; i++) {\r\n        let index = indexOfVertex(targets[i], container);\r\n        if (index != -1) {\r\n            container[index] = null;\r\n        }\r\n    }\r\n\r\n    filterNulls(container);\r\n\r\n}\r\n\r\nfunction indexOfVertex(vt: plainVertex, vtArr: plainVertex[]) {\r\n    for (let i = 0; i < vtArr.length; i++) {\r\n        if (vtArr[i] != null) {\r\n            if (vtArr[i].x == vt.x && vtArr[i].y == vt.y) {\r\n\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction reverse(pVs: plainVertex[]) {\r\n    for (let index = 0; index < pVs.length / 2; index++) {\r\n        let element = pVs[index];\r\n        pVs[index] = pVs[pVs.length - 1 - index];\r\n        pVs[pVs.length - 1 - index] = element;\r\n    }\r\n}\r\n\r\nfunction findClosestIndex(pos: Vec2, pVs: plainVertex[]) {\r\n    for (let index = 0; index < pVs.length; index++) {\r\n        let element = pVs[index];\r\n        if (Math.abs(element.x - pos.x) < 0.001 && Math.abs(element.y - pos.y) < 0.001) {\r\n            return index;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function findClosestAngle(angle: number, linkNodes: linkNode[]) {\r\n    const PI = 3.141592654\r\n    let minAngle = PI * 2;\r\n    let index = 0;\r\n    for (let i = 0; i < linkNodes.length; i++) {\r\n        if (linkNodes[i] == null) return null;\r\n        let diff = Math.abs(angle - linkNodes[i]._angle)\r\n        if (diff > (3 / 2) * PI) { diff = (2 * PI - diff) }\r\n        if (diff < minAngle) {\r\n            minAngle = diff;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n\r\nfunction unitaryVector(posA: Vec2, posB: Vec2) {\r\n    let length = lengthVector(posA, posB);\r\n    return new Vec2((posB.x - posA.x) / length, (posB.y - posA.y) / length);\r\n}\r\n\r\n\r\nfunction isBorder(point: Vec2, pVs: plainVertex[]) {\r\n    let isBorder = false;\r\n    pVs.forEach(el => {\r\n        if (el.border) {\r\n            if (point.x == el.x && point.y == el.y) {\r\n                isBorder = true;\r\n            }\r\n        }\r\n    })\r\n    return isBorder\r\n}\r\n\r\n\r\nfunction lengthVector(a: Vec2, b: Vec2) {\r\n    return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n}\r\n\r\n\r\n\r\n\r\nfunction deepCopy(pv: plainVertex[], externalBorder: boolean) {\r\n    let output: plainVertex[] = [];\r\n    pv.forEach(pv_el => {\r\n        if (pv_el.border == externalBorder) {\r\n            let newPv = new plainVertex(pv_el.x, pv_el.y, pv_el.border);\r\n            let newLinkNodes: linkNode[] = [];\r\n\r\n            pv_el.links.forEach(ln => {\r\n                if (ln != null) {\r\n                    let newlinkNode = new linkNode(ln.x, ln.y, ln._angle);\r\n                    newLinkNodes.push(newlinkNode)\r\n                }\r\n            });\r\n\r\n            newPv.links = newLinkNodes\r\n            output.push(newPv)\r\n        }\r\n    });\r\n    return output;\r\n}\r\n\r\n\r\nfunction promediardireccion(vecA: Vec2, vecB: Vec2) {\r\n    return unitaryVector(new Vec2(0, 0), new Vec2(vecB.x - vecA.x, vecB.y - vecA.y));\r\n\r\n}\r\n\r\nfunction cloneVertexPlain(ver: plainVertex) {\r\n    let newPv = new plainVertex(ver.x, ver.y, ver.border)\r\n    ver.links.forEach(element => {\r\n        if (element != null) {\r\n            let newLNode = new linkNode(element.x, element.y, roundValue(element._angle))\r\n            newPv.links.push(newLNode);\r\n        }\r\n    });\r\n    return newPv\r\n}\r\n\r\nfunction roundValue(val: number) {\r\n    return (Math.round(val * 1000)) / 1000\r\n}\r\n\r\n\r\nexport function calculateEnvolArea(indexes: number[], coords: number[], jump: number) {\r\n    let area = 0;\r\n    for (let i = 0; i < indexes.length; i += jump) {\r\n        let x1 = coords[indexes[i + 1] * jump] - coords[indexes[i] * jump]\r\n        let y1 = coords[indexes[i + 1] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let x2 = coords[indexes[i + 2] * jump] - coords[indexes[i] * jump]\r\n        let y2 = coords[indexes[i + 2] * jump + 1] - coords[indexes[i] * jump + 1]\r\n        let triangleArea = Math.abs(cross(x1, y1, x2, y2) / 2)\r\n        area += triangleArea;\r\n    }\r\n    return area;\r\n}\r\nexport function calcAproxArea(points: Vec2[]) {\r\n    let minX = Number.POSITIVE_INFINITY;\r\n    let maxX = Number.NEGATIVE_INFINITY;\r\n    let minY = Number.POSITIVE_INFINITY;\r\n    let maxY = Number.NEGATIVE_INFINITY;\r\n    points.forEach(e => {\r\n        if (e.x > maxX) maxX = e.x;\r\n        if (e.x < minX) minX = e.x;\r\n        if (e.y > maxY) maxY = e.y;\r\n        if (e.y < minY) minY = e.y;\r\n    });\r\n    return (maxX - minX) * (maxY - minY)\r\n}\r\n"]}
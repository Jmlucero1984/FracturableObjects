{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/StaticFractureManager.ts"],"names":["Queue","_decorator","Component","instantiate","PolygonCollider2D","Vec2","Vec3","FractDelaunay","calculateEnvolArea2D","getFracturable","DelaunayAssemblerImplementer","earcut","ccclass","property","constructor","elements","head","tail","enqueue","element","dequeue","item","peek","length","isEmpty","StaticFractureManager","start","update","deltaTime","cola","working","console","log","createCopy","frac","parts","fractureObj","nodeF","node","coordsA","coordsB","forEach","v","border","push","x","y","minArea","a1","a2","recursiveness","pc","getComponent","points","index","delaunayPoints","apply","implementer","modifyPoints","stroke","copyOf","prefab","name","Math","random","cfwa","parent","points2","customLoad","setRotation","getRotation","setPosition","position","setTimeout","available"],"mappings":";;;6OAOMA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPGC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAmBC,MAAAA,iB,OAAAA,iB;AAAmBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;AACnEC,MAAAA,a,iBAAAA,a;;AACeC,MAAAA,oB,iBAAAA,oB;AAAsBC,MAAAA,c,iBAAAA,c;;AACrCC,MAAAA,4B,iBAAAA,4B;;AACAC,MAAAA,M,iBAAAA,M;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBZ,U;AAExBD,MAAAA,K,GAAN,MAAMA,KAAN,CAAe;AAEJc,QAAAA,WAAW,CACNC,QADM,EAENC,IAFM,EAGNC,IAHM,EAIhB;AAAA,cAHUF,QAGV;AAHUA,YAAAA,QAGV,GAHwC,EAGxC;AAAA;;AAAA,cAFUC,IAEV;AAFUA,YAAAA,IAEV,GAFyB,CAEzB;AAAA;;AAAA,cADUC,IACV;AADUA,YAAAA,IACV,GADyB,CACzB;AAAA;;AAAA,eAHUF,QAGV,GAHUA,QAGV;AAAA,eAFUC,IAEV,GAFUA,IAEV;AAAA,eADUC,IACV,GADUA,IACV;AAAG;;AAEEC,QAAAA,OAAO,CAACC,OAAD,EAAmB;AAC7B,eAAKJ,QAAL,CAAc,KAAKE,IAAnB,IAA2BE,OAA3B;AACA,eAAKF,IAAL;AACH;;AAEMG,QAAAA,OAAO,GAAM;AAChB,cAAMC,IAAI,GAAG,KAAKN,QAAL,CAAc,KAAKC,IAAnB,CAAb;AACA,iBAAO,KAAKD,QAAL,CAAc,KAAKC,IAAnB,CAAP;AACA,eAAKA,IAAL;AAEA,iBAAOK,IAAP;AACH;;AAEMC,QAAAA,IAAI,GAAM;AACb,iBAAO,KAAKP,QAAL,CAAc,KAAKC,IAAnB,CAAP;AACH;;AAEgB,YAANO,MAAM,GAAW;AACxB,iBAAO,KAAKN,IAAL,GAAY,KAAKD,IAAxB;AACH;;AAEiB,YAAPQ,OAAO,GAAY;AAC1B,iBAAO,KAAKD,MAAL,KAAgB,CAAvB;AACH;;AA/BU,O;;uCAoCFE,qB,WADZb,OAAO,CAAC,uBAAD,C,2BAAR,MACaa,qBADb,SAC2CvB,SAD3C,CACqD;AAGjDwB,QAAAA,KAAK,GAAG,CAEP;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAG,CAACH,qBAAqB,CAACI,IAAtB,CAA2BL,OAA5B,IAAqC,CAACC,qBAAqB,CAACK,OAA/D,EAAwE;AACpEC,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAP,YAAAA,qBAAqB,CAACK,OAAtB,GAA8B,IAA9B;AACAL,YAAAA,qBAAqB,CAACQ,UAAtB,CAAiCR,qBAAqB,CAACI,IAAtB,CAA2BT,OAA3B,EAAjC;AAGH;AAEJ;;AACgB,eAAVa,UAAU,CAACC,IAAD,EAAoB;AACjC,cAAIC,KAAK,GAAG;AAAA;AAAA,gDAAeD,IAAI,CAACE,WAApB,CAAZ;;AACA,cAAID,KAAK,IAAI,IAAb,EAAmB;AACf,gBAAIE,KAAK,GAACH,IAAI,CAACI,IAAf;AAGA,gBAAIC,OAAiB,GAAG,EAAxB;AACA,gBAAIC,OAAiB,GAAG,EAAxB;AACAL,YAAAA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiBC,CAAC,IAAG;AACjB,kBAAGA,CAAC,CAACC,MAAL,EAAY;AACRJ,gBAAAA,OAAO,CAACK,IAAR,CAAaF,CAAC,CAACG,CAAf;AACAN,gBAAAA,OAAO,CAACK,IAAR,CAAaF,CAAC,CAACI,CAAf;AACH;AACJ,aALD;AAMAX,YAAAA,KAAK,CAAC,CAAD,CAAL,CAASM,OAAT,CAAiBC,CAAC,IAAG;AACjB,kBAAGA,CAAC,CAACC,MAAL,EAAY;AACRH,gBAAAA,OAAO,CAACI,IAAR,CAAaF,CAAC,CAACG,CAAf;AACAL,gBAAAA,OAAO,CAACI,IAAR,CAAaF,CAAC,CAACI,CAAf;AACH;AACJ,aALD;AAMA,gBAAIC,OAAO,GAAE,GAAb;AAEA,gBAAIC,EAAE,GAAG;AAAA;AAAA,8DAAqB;AAAA;AAAA,kCAAOT,OAAP,EAAe,IAAf,EAAoB,CAApB,CAArB,EAA4CA,OAA5C,CAAT;AACA,gBAAIU,EAAE,GAAE;AAAA;AAAA,8DAAqB;AAAA;AAAA,kCAAOT,OAAP,EAAe,IAAf,EAAoB,CAApB,CAArB,EAA4CA,OAA5C,CAAR;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBgB,EAA5B;AACAjB,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAgBiB,EAA5B;;AACA,gBAAID,EAAE,GAACD,OAAH,IAAaE,EAAE,GAACF,OAApB,EAA6B;AACzBb,cAAAA,IAAI,CAACgB,aAAL;AACA,kBAAIC,EAAE,GAAGd,KAAK,CAACe,YAAN,CAAmBhD,iBAAnB,CAAT;AACA,kBAAIiD,MAAc,GAAG,EAArB;AACA,kBAAIC,KAAK,GAAG,CAAZ;;AACA,qBAAOA,KAAK,GAAGnB,KAAK,CAAC,CAAD,CAAL,CAASZ,MAAjB,IAA2BY,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBX,MAAlD,EAA0D;AACtDU,gBAAAA,MAAM,CAACT,IAAP,CAAY,IAAIvC,IAAJ,CAAS8B,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBT,CAAzB,EAA4BV,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBR,CAA5C,CAAZ;AACAQ,gBAAAA,KAAK;AACR;;AAEDpB,cAAAA,IAAI,CAACqB,cAAL,GAAsBpB,KAAK,CAAC,CAAD,CAA3B;AACAgB,cAAAA,EAAE,CAACE,MAAH,GAAYA,MAAZ;AACAF,cAAAA,EAAE,CAACK,KAAH;AACAtB,cAAAA,IAAI,CAACuB,WAAL,CAAiBC,YAAjB,CAA8BL,MAA9B;AAEAnB,cAAAA,IAAI,CAACuB,WAAL,CAAiBE,MAAjB;AAGA,kBAAIC,MAAM,GAAGzD,WAAW,CAAC+B,IAAI,CAAC2B,MAAN,CAAxB;AACAD,cAAAA,MAAM,CAACE,IAAP,GAAY,cAAYC,IAAI,CAACC,MAAL,KAAc,OAAtC;AACA,kBAAIC,IAAI,GAAGL,MAAM,CAACR,YAAP;AAAA;AAAA,iDAAX;AACAa,cAAAA,IAAI,CAACJ,MAAL,GAAc3B,IAAI,CAAC2B,MAAnB;AAEAD,cAAAA,MAAM,CAACM,MAAP,GAAgB7B,KAAK,CAAC6B,MAAtB;AACAD,cAAAA,IAAI,CAACV,cAAL,GAAsBpB,KAAK,CAAC,CAAD,CAA3B;AACA,kBAAIgC,OAAe,GAAG,EAAtB;AACAb,cAAAA,KAAK,GAAG,CAAR;;AACA,qBAAOA,KAAK,GAAGnB,KAAK,CAAC,CAAD,CAAL,CAASZ,MAAjB,IAA2BY,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBX,MAAlD,EAA0D;AACtDwB,gBAAAA,OAAO,CAACvB,IAAR,CAAa,IAAIvC,IAAJ,CAAS8B,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBT,CAAzB,EAA4BV,KAAK,CAAC,CAAD,CAAL,CAASmB,KAAT,EAAgBR,CAA5C,CAAb;AACAQ,gBAAAA,KAAK;AACR;;AAGDM,cAAAA,MAAM,CAACR,YAAP;AAAA;AAAA,gFAAkDgB,UAAlD,CAA6DD,OAA7D,EAjCyB,CAmCzB;;AACAF,cAAAA,IAAI,CAACf,aAAL,GAAqB,CAArB;AACAnB,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAYmC,OAAZ;AACApC,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAiC,cAAAA,IAAI,CAACG,UAAL,CAAgBD,OAAhB,EAxCyB,CA0CzB;AACF;;AACEP,cAAAA,MAAM,CAACS,WAAP,CAAmBhC,KAAK,CAACiC,WAAN,EAAnB;AACAV,cAAAA,MAAM,CAACW,WAAP,CAAmB,IAAIjE,IAAJ,CAAS+B,KAAK,CAACmC,QAAN,CAAe3B,CAAxB,EAA2BR,KAAK,CAACmC,QAAN,CAAe1B,CAA1C,CAAnB;AAGArB,cAAAA,qBAAqB,CAACK,OAAtB,GAA8B,KAA9B;AACH;AACJ,WA1ED,MA0EM;AACFC,YAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACH;;AACDyC,UAAAA,UAAU,CAAC,MAAM;AAAEvC,YAAAA,IAAI,CAACwC,SAAL,GAAiB,IAAjB;AAAwB,WAAjC,EAAmC,CAAnC,CAAV;AACH;;AAnGgD,O,UAClC5C,O,GAAQ,K,UACTD,I,GAA4B,IAAI7B,KAAJ,E","sourcesContent":["import { _decorator, Component, instantiate, Node, PolygonCollider2D, Vec2, Vec3 } from 'cc';\r\nimport { FractDelaunay } from './FractDelaunay';\r\nimport { calcAproxArea, calculateEnvolArea2D, getFracturable } from './DelaunaySplitter';\r\nimport { DelaunayAssemblerImplementer } from './DelaunayAssemblerImplementer';\r\nimport { earcut } from './earcut';\r\nconst { ccclass, property } = _decorator;\r\n\r\nclass Queue<T> {\r\n  \r\n    public constructor(\r\n        private elements: Record<number, T> = {},\r\n        private head: number = 0,\r\n        private tail: number = 0\r\n    ) { }\r\n\r\n    public enqueue(element: T): void {\r\n        this.elements[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    public dequeue(): T {\r\n        const item = this.elements[this.head];\r\n        delete this.elements[this.head];\r\n        this.head++;\r\n\r\n        return item;\r\n    }\r\n\r\n    public peek(): T {\r\n        return this.elements[this.head];\r\n    }\r\n\r\n    public get length(): number {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    public get isEmpty(): boolean {\r\n        return this.length === 0;\r\n    }\r\n\r\n}\r\n\r\n@ccclass('StaticFractureManager')\r\nexport class StaticFractureManager extends Component {\r\n    private static working=false;\r\n    public static cola:Queue<FractDelaunay> = new Queue<FractDelaunay>();\r\n    start() {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if(!StaticFractureManager.cola.isEmpty&&!StaticFractureManager.working) {\r\n            console.log(\"TENEMOS ALGO\")\r\n            StaticFractureManager.working=true;\r\n            StaticFractureManager.createCopy(StaticFractureManager.cola.dequeue());\r\n\r\n\r\n        }\r\n        \r\n    }\r\n    static createCopy(frac:FractDelaunay){\r\n        let parts = getFracturable(frac.fractureObj);\r\n        if (parts != null) {\r\n            let nodeF=frac.node;\r\n         \r\n\r\n            let coordsA: number[] = [];\r\n            let coordsB: number[] = [];\r\n            parts[0].forEach(v=> {\r\n                if(v.border){\r\n                    coordsA.push(v.x)\r\n                    coordsA.push(v.y)\r\n                }\r\n            })\r\n            parts[1].forEach(v=> {\r\n                if(v.border){\r\n                    coordsB.push(v.x)\r\n                    coordsB.push(v.y)\r\n                }\r\n            })\r\n            let minArea= 300;\r\n       \r\n            let a1 = calculateEnvolArea2D(earcut(coordsA,null,2),coordsA)\r\n            let a2= calculateEnvolArea2D(earcut(coordsB,null,2),coordsB)\r\n            console.log(\"REAL AREA 1: \"+a1);\r\n            console.log(\"REAL AREA 2: \"+a2);\r\n            if (a1>minArea&& a2>minArea) {\r\n                frac.recursiveness--;\r\n                let pc = nodeF.getComponent(PolygonCollider2D)\r\n                let points: Vec2[] = []\r\n                let index = 0;\r\n                while (index < parts[0].length && parts[0][index].border) {\r\n                    points.push(new Vec2(parts[0][index].x, parts[0][index].y))\r\n                    index++;\r\n                }\r\n             \r\n                frac.delaunayPoints = parts[0];\r\n                pc.points = points;\r\n                pc.apply();\r\n                frac.implementer.modifyPoints(points)\r\n               \r\n                frac.implementer.stroke();\r\n               \r\n \r\n                let copyOf = instantiate(frac.prefab)\r\n                copyOf.name=\"Instancia\"+Math.random()*1563813;\r\n                let cfwa = copyOf.getComponent(FractDelaunay)\r\n                cfwa.prefab = frac.prefab;\r\n            \r\n                copyOf.parent = nodeF.parent;\r\n                cfwa.delaunayPoints = parts[1];\r\n                let points2: Vec2[] = []\r\n                index = 0;\r\n                while (index < parts[1].length && parts[1][index].border) {\r\n                    points2.push(new Vec2(parts[1][index].x, parts[1][index].y))\r\n                    index++;\r\n                }\r\n              \r\n             \r\n                copyOf.getComponent(DelaunayAssemblerImplementer).customLoad(points2)\r\n         \r\n                //copyOf.getComponent(DelaunayAssemblerImplementer).markForUpdateRenderData();\r\n                cfwa.recursiveness = 3;\r\n                console.log(\"APPLYING POINTS\")\r\n                console.log(points2)\r\n                console.log(\"----\")\r\n                cfwa.customLoad(points2);\r\n        \r\n                //copyOf.getComponent(PolygonCollider2D).points=points2;\r\n              //  copyOf.getComponent(PolygonCollider2D).apply();\r\n                copyOf.setRotation(nodeF.getRotation());\r\n                copyOf.setPosition(new Vec3(nodeF.position.x, nodeF.position.y));\r\n                \r\n                \r\n                StaticFractureManager.working=false;\r\n            }\r\n        } else{\r\n            console.log(\"*******************************************************\")\r\n            console.log(\"*****************////  FALLÓ   ////********************\")\r\n            console.log(\"*******************************************************\")\r\n        }\r\n        setTimeout(() => { frac.available = true; }, 0);\r\n    }\r\n}\r\n\r\n\r\n"]}
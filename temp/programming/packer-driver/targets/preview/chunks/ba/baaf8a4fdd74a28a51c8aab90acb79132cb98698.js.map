{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/DelaunayPackage/earcut.ts"],"names":["Aim","linkedList","datas","start","end","dim","clockwise","i","last","signedArea","insertNode","equals","next","removeNode","filterPoints","p","again","steiner","area","prev","earcutLinked","ear","triangles","minX","minY","size","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","x","y","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","nextZ","z","prevZ","intersects","locallyInside","isValidDiagonal","splitPolygon","eliminateHoles","holeIndices","outerNode","queue","len","list","length","getLeftmost","sort","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","Math","abs","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","inside","a2","b2","an","bp","sum","j","earcut","hasHoles","outerLen","maxX","maxY","max","constructor"],"mappings":"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","sourcesContent":["/*\r\n Copyright (c) 2017-2023 Xiamen Yaji Software Co., Ltd.\r\n\r\n http://www.cocos.com\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated documentation files (the \"Software\"), to deal\r\n in the Software without restriction, including without limitation the rights to\r\n use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n of the Software, and to permit persons to whom the Software is furnished to do so,\r\n subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in\r\n all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n*/\r\n\r\nclass Aim {\r\n    // vertex index in coordinates array\r\n    public i: number;\r\n\r\n    // vertex coordinates\r\n    public x: number;\r\n    public y: number;\r\n\r\n    // previous and next vertex nodes in a polygon ring\r\n    public prev: Aim | null = null;\r\n    public next: Aim | null = null;\r\n\r\n    // z-order curve value\r\n    public z: number = null as any;\r\n\r\n    // previous and next nodes in z-order\r\n    public prevZ: Aim | null = null;\r\n    public nextZ: Aim | null = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    public steiner = false;\r\n\r\n    constructor (i: number, x: number, y: number) {\r\n        this.i = i;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList (datas: number[], start: number, end: number, dim: number, clockwise: boolean) {\r\n    let i = 0;\r\n    let last: Aim | null = null;\r\n\r\n    if (clockwise === (signedArea(datas, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) {\r\n            last = insertNode(i, datas[i], datas[i + 1], last);\r\n        }\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) {\r\n            last = insertNode(i, datas[i], datas[i + 1], last);\r\n        }\r\n    }\r\n\r\n    if (last && equals(last, last.next!)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints (start: Aim | null, end: Aim | null = null) {\r\n    if (!start) {\r\n        return start;\r\n    }\r\n\r\n    if (!end) {\r\n        end = start;\r\n    }\r\n\r\n    let p = start;\r\n    let again = false;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next!) || area(p.prev!, p, p.next!) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev!;\r\n            if (p === p.next) {\r\n                return null;\r\n            }\r\n            again = true;\r\n        } else {\r\n            p = p.next!;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked (ear: Aim | null, triangles: number[], dim: number, minX: number, minY: number, size: number, pass = 0) {\r\n    if (!ear) {\r\n        return;\r\n    }\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && size) {\r\n        indexCurve(ear, minX, minY, size);\r\n    }\r\n\r\n    let stop: Aim | null = ear;\r\n    let prev: Aim | null = null;\r\n    let next: Aim | null = null;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear!.prev !== ear!.next) {\r\n        prev = ear!.prev!;\r\n        next = ear!.next!;\r\n\r\n        if (size ? isEarHashed(ear!, minX, minY, size) : isEar(ear!)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim);\r\n            triangles.push(ear!.i / dim);\r\n            triangles.push(next.i / dim);\r\n\r\n            removeNode(ear!);\r\n\r\n            // skipping the next vertices leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(ear, triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, size, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, size);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar (ear: Aim) {\r\n    const a = ear.prev!;\r\n    const b = ear;\r\n    const c = ear.next!;\r\n\r\n    if (area(a, b, c) >= 0) { return false; } // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    let p = ear.next!.next!;\r\n\r\n    while (p !== ear.prev) {\r\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y)\r\n            && area(p.prev!, p, p.next!) >= 0) { return false; }\r\n        p = p.next!;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed (ear: Aim, minX: number, minY: number, size) {\r\n    const a = ear.prev!;\r\n    const b = ear;\r\n    const c = ear.next!;\r\n\r\n    if (area(a, b, c) >= 0) { return false; } // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    const minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x);\r\n    const minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y);\r\n    const maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x);\r\n    const maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    const minZ = zOrder(minTX, minTY, minX, minY, size);\r\n    const maxZ = zOrder(maxTX, maxTY, minX, minY, size);\r\n\r\n    // first look for points inside the triangle in increasing z-order\r\n    let p = ear.nextZ;\r\n\r\n    while (p && p.z <= maxZ) {\r\n        if (p !== ear.prev && p !== ear.next\r\n            && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y)\r\n            && area(p.prev!, p, p.next!) >= 0) { return false; }\r\n        p = p.nextZ;\r\n    }\r\n\r\n    // then look for points in decreasing z-order\r\n    p = ear.prevZ;\r\n\r\n    while (p && p.z >= minZ) {\r\n        if (p !== ear.prev && p !== ear.next\r\n            && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y)\r\n            && area(p.prev!, p, p.next!) >= 0) {\r\n            return false;\r\n        }\r\n\r\n        p = p.prevZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections (start: Aim, triangles: number[], dim: number) {\r\n    let p = start;\r\n    do {\r\n        const a = p.prev!;\r\n        const b = p.next!.next!;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next!, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n            triangles.push(a.i / dim);\r\n            triangles.push(p.i / dim);\r\n            triangles.push(b.i / dim);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next!);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next!;\r\n    } while (p !== start);\r\n\r\n    return p;\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut (start: Aim | null, triangles: number[], dim: number, minX: number, minY: number, size: number) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    let a = start!;\r\n    do {\r\n        let b = a.next!.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b!.i && isValidDiagonal(a, b!)) {\r\n                // split the polygon in two by the diagonal\r\n                let c = splitPolygon(a, b!);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next)!;\r\n                c = filterPoints(c, c.next)!;\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, size);\r\n                earcutLinked(c, triangles, dim, minX, minY, size);\r\n                return;\r\n            }\r\n            b = b!.next;\r\n        }\r\n        a = a.next!;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles (datas: number[], holeIndices: number[], outerNode: Aim | null, dim: number) {\r\n    const queue: Aim[] = [];\r\n    let i = 0;\r\n    let len = 0;\r\n    let start = 0;\r\n    let end = 0;\r\n    let list: Aim | null = null;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : datas.length;\r\n        list = linkedList(datas, start, end, dim, false);\r\n        if (!list) {\r\n            continue;\r\n        }\r\n        if (list === list.next) {\r\n            list.steiner = true;\r\n        }\r\n\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    if (!outerNode) {\r\n        return outerNode;\r\n    }\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        eliminateHole(queue[i], outerNode);\r\n        outerNode = filterPoints(outerNode, outerNode!.next);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX (a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole (hole: Aim, outerNode: Aim | null) {\r\n    outerNode = findHoleBridge(hole, outerNode!);\r\n    if (outerNode) {\r\n        const b = splitPolygon(outerNode, hole);\r\n        filterPoints(b, b.next);\r\n    }\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge (hole: Aim, outerNode: Aim) {\r\n    let p = outerNode;\r\n    const hx = hole.x;\r\n    const hy = hole.y;\r\n    let qx = -Infinity;\r\n    let m: Aim | null = null;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next!.y) {\r\n            const x = p.x + (hy - p.y) * (p.next!.x - p.x) / (p.next!.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                if (x === hx) {\r\n                    if (hy === p.y) { return p; }\r\n                    if (hy === p.next!.y) { return p.next; }\r\n                }\r\n                m = p.x < p.next!.x ? p : p.next!;\r\n            }\r\n        }\r\n        p = p.next!;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) {\r\n        return null;\r\n    }\r\n\r\n    if (hx === qx) {\r\n        return m.prev;\r\n    } // hole touches outer segment; pick lower endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    const stop = m;\r\n    const mx = m.x;\r\n    const my = m.y;\r\n    let tanMin = Infinity;\r\n    let tan;\r\n\r\n    p = m.next!;\r\n\r\n    while (p !== stop) {\r\n        if (hx >= p.x && p.x >= mx\r\n                && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next!;\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve (start: Aim, minX: number, minY: number, size: number) {\r\n    let p = start;\r\n    do {\r\n        if (p.z === null) {\r\n            p.z = zOrder(p.x, p.y, minX, minY, size);\r\n        }\r\n\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next!;\r\n    } while (p !== start);\r\n\r\n    p.prevZ!.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked (list: Aim | null) {\r\n    let i = 0;\r\n    let p: Aim | null = null;\r\n    let q: Aim | null = null;\r\n    let e: Aim | null = null;\r\n    let tail: Aim | null = null;\r\n    let numMerges = 0;\r\n    let pSize = 0;\r\n    let qSize = 0;\r\n    let inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) { break; }\r\n            }\r\n\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n                if (pSize === 0) {\r\n                    e = q;\r\n                    q = q!.nextZ;\r\n                    qSize--;\r\n                } else if (qSize === 0 || !q) {\r\n                    e = p;\r\n                    p = p!.nextZ;\r\n                    pSize--;\r\n                } else if (p!.z <= q.z) {\r\n                    e = p;\r\n                    p = p!.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) { tail.nextZ = e; } else { list = e; }\r\n\r\n                e!.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail!.nextZ = null;\r\n        inSize *= 2;\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and size of the data bounding box\r\nfunction zOrder (x: number, y: number, minX: number, minY: number, size: number) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) / size;\r\n    y = 32767 * (y - minY) / size;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost (start: Aim) {\r\n    let p = start;\r\n    let leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x) {\r\n            leftmost = p;\r\n        }\r\n\r\n        p = p.next!;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle (ax: number, ay: number, bx: number, by: number, cx: number, cy: number, px: number, py: number) {\r\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0\r\n           && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0\r\n           && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal (a: Aim, b: Aim) {\r\n    return a.next!.i !== b.i && a.prev!.i !== b.i && !intersectsPolygon(a, b)\r\n           && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area (p: Aim, q: Aim, r: Aim) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals (p1: Aim, p2: Aim) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects (p1: Aim, q1: Aim, p2: Aim, q2: Aim) {\r\n    if ((equals(p1, q1) && equals(p2, q2))\r\n        || (equals(p1, q2) && equals(p2, q1))) {\r\n        return true;\r\n    }\r\n\r\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0\r\n           && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon (a: Aim, b: Aim) {\r\n    let p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next!.i !== a.i && p.i !== b.i && p.next!.i !== b.i\r\n                && intersects(p, p.next!, a, b)) { return true; }\r\n        p = p.next!;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside (a: Aim, b: Aim) {\r\n    return area(a.prev!, a, a.next!) < 0\r\n        ? area(a, b, a.next!) >= 0 && area(a, a.prev!, b) >= 0\r\n        : area(a, b, a.prev!) < 0 || area(a, a.next!, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside (a: Aim, b: Aim) {\r\n    let p = a;\r\n    let inside = false;\r\n    const px = (a.x + b.x) / 2;\r\n    const py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next!.y > py)) && (px < (p.next!.x - p.x) * (py - p.y) / (p.next!.y - p.y) + p.x)) {\r\n            inside = !inside;\r\n        }\r\n        p = p.next!;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon (a: Aim, b: Aim) {\r\n    const a2 = new Aim(a.i, a.x, a.y);\r\n    const b2 = new Aim(b.i, b.x, b.y);\r\n    const an = a.next!;\r\n    const bp = b.prev!;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode (i: number, x: number, y: number, last: Aim | null) {\r\n    const p = new Aim(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next!.prev = p;\r\n        last.next = p;\r\n    }\r\n\r\n    return p;\r\n}\r\n\r\nfunction removeNode (p: Aim) {\r\n    p.next!.prev = p.prev;\r\n    p.prev!.next = p.next;\r\n\r\n    if (p.prevZ) {\r\n        p.prevZ.nextZ = p.nextZ;\r\n    }\r\n\r\n    if (p.nextZ) {\r\n        p.nextZ.prevZ = p.prevZ;\r\n    }\r\n}\r\n\r\nfunction signedArea (datas: number[], start: number, end: number, dim: number) {\r\n    let sum = 0;\r\n    for (let i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (datas[j] - datas[i]) * (datas[i + 1] + datas[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\nexport function earcut (datas: number[], holeIndices: number[] | null, dim: number) {\r\n    dim = dim || 3;\r\n\r\n    const hasHoles = holeIndices ? holeIndices.length : 0;\r\n    const outerLen = hasHoles ? holeIndices![0] * dim : datas.length;\r\n    let outerNode = linkedList(datas, 0, outerLen, dim, true);\r\n    const triangles: number[] = [];\r\n\r\n    if (!outerNode) {\r\n        return triangles;\r\n    }\r\n\r\n    let minX = 0;\r\n    let minY = 0;\r\n    let maxX = 0;\r\n    let maxY = 0;\r\n    let x = 0;\r\n    let y = 0;\r\n    let size = 0;\r\n\r\n    if (hasHoles) {\r\n        outerNode = eliminateHoles(datas, holeIndices!, outerNode, dim);\r\n    }\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (datas.length > 80 * dim) {\r\n        minX = maxX = datas[0];\r\n        minY = maxY = datas[1];\r\n\r\n        for (let i = dim; i < outerLen; i += dim) {\r\n            x = datas[i];\r\n            y = datas[i + 1];\r\n            if (x < minX) { minX = x; }\r\n            if (y < minY) { minY = y; }\r\n            if (x > maxX) { maxX = x; }\r\n            if (y > maxY) { maxY = y; }\r\n        }\r\n\r\n        // minX, minY and size are later used to transform coords into integers for z-order calculation\r\n        size = Math.max(maxX - minX, maxY - minY);\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, size);\r\n\r\n    return triangles;\r\n}\r\n\r\n// // return a percentage difference between the polygon area and its triangulation area;\r\n// // used to verify correctness of triangulation\r\n// earcut.deviation = function (data, holeIndices, dim, triangles) {\r\n//     const hasHoles = holeIndices && holeIndices.length;\r\n//     const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n//     let polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n//     if (hasHoles) {\r\n//         for (let i = 0, len = holeIndices.length; i < len; i++) {\r\n//             const start = holeIndices[i] * dim;\r\n//             const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n//             polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n//         }\r\n//     }\r\n\r\n//     let trianglesArea = 0;\r\n//     for (i = 0; i < triangles.length; i += 3) {\r\n//         const a = triangles[i] * dim;\r\n//         const b = triangles[i + 1] * dim;\r\n//         const c = triangles[i + 2] * dim;\r\n//         trianglesArea += Math.abs(\r\n//             (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n//             (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n//     }\r\n\r\n//     return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n//         Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n// };\r\n\r\n// // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\n// earcut.flatten = function (data) {\r\n//     let dim = data[0][0].length,\r\n//         result = {vertices: [], holes: [], dimensions: dim},\r\n//         holeIndex = 0;\r\n\r\n//     for (let i = 0; i < data.length; i++) {\r\n//         for (let j = 0; j < data[i].length; j++) {\r\n//             for (let d = 0; d < dim; d++) { result.vertices.push(data[i][j][d]); }\r\n//         }\r\n//         if (i > 0) {\r\n//             holeIndex += data[i - 1].length;\r\n//             result.holes.push(holeIndex);\r\n//         }\r\n//     }\r\n//     return result;\r\n// };\r\n"]}
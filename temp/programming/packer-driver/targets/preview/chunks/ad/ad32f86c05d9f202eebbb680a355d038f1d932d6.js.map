{"version":3,"sources":["file:///C:/Users/jmluc/FracturableObjects/assets/Scripts/Legacy/FractwithAssembler.ts"],"names":["_decorator","CCInteger","Component","Contact2DType","instantiate","Mat4","PolygonCollider2D","Prefab","RigidBody2D","Vec3","MaskSplitter","FracturableAssembler","FracturaImplementer","ccclass","property","FractwithAssembler","area","start","setListeners","setTimeout","c","node","getComponent","enabled","getArea","p","on","END_CONTACT","onEndContact","BEGIN_CONTACT","onBeginContact","update","deltaTime","createCopy","fracture","console","log","parts","lineCutPolygon","a1","calcAproxArea","a2","minArea","recursiveness","fi","pc","points","polygon","modifyPoints","apply","copyOf","prefab","cfwa","parent","setPoints","setRotation","getRotation","setPosition","position","x","y","selfCollider","otherCollider","contact","otherFracturable","name","inverseWorldMatrix","invert","getWorldMatrix","localContactPoint","getWorldManifold","transformMat4","normalContactPoint","getManifold","localNormal","fractureObj","Fracture","fracturePoints","getFracturable","length"],"mappings":"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","sourcesContent":[" \r\n\r\nimport { _decorator, CCInteger, Collider2D, Component, Contact2DType, Gradient, Graphics, instantiate, IPhysics2DContact, Mask, Mat4, Node, PolygonCollider2D, Prefab, RigidBody2D, Vec2, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport * as MaskSplitter from \"./MaskSplitter\"\r\nimport { FracturableAssembler } from './FracturableAssembler';\r\nimport { FracturaImplementer } from './FracturaImplementer';\r\n\r\n@ccclass('FractwithAssembler')\r\nexport class FractwithAssembler extends Component {\r\n    @property(Prefab)\r\n    prefab: Prefab;\r\n\r\n\r\n    @property(CCInteger)\r\n    recursiveness: number=3;\r\n    @property(CCInteger)\r\n    minArea: number=1500;\r\n\r\n\r\n    private area:number;\r\n   \r\n    start() {\r\n\r\n        this.setListeners();\r\n        setTimeout(() => {\r\n            let c = this.node.getComponent(RigidBody2D);\r\n            c.enabled = true;\r\n            this.area=this.node.getComponent(FracturaImplementer).getArea();\r\n        \r\n        }, 1);\r\n\r\n        \r\n   \r\n    }\r\n    setListeners() {\r\n\r\n        let p = this.node.getComponent(PolygonCollider2D);\r\n        /*\r\n        this.area= MaskSplitter.calculateEnvolArea(p.points);\r\n        console.log(\"El obj \"+ this.node.name+\" tiene el area \"+this.area)*/\r\n     \r\n        p.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n        p.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n      \r\n        // }\r\n    }\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n  \r\n  \r\n\r\n    createCopy(fracture:MaskSplitter.Fracture) {\r\n       console.log(\"ENTRO\")\r\n        let parts = MaskSplitter.lineCutPolygon(fracture);\r\n        \r\n        if (parts != null) {\r\n            console.log(\"PARTS 0\")\r\n            console.log(parts[0])\r\n            console.log(\"PARTS 1\")\r\n            console.log(parts[1])\r\n             let a1=MaskSplitter.calcAproxArea(parts[0])\r\n            let a2=MaskSplitter.calcAproxArea(parts[1])\r\n           if(a1>this.minArea && a2>this.minArea) {\r\n            this.recursiveness--;\r\n            let fi=  this.node.getComponent(FracturaImplementer);\r\n            let pc =  this.node.getComponent(PolygonCollider2D)\r\n            pc.points = parts[0];   \r\n            fi.polygon=parts[0];\r\n            \r\n            fi.modifyPoints();\r\n            pc.apply();\r\n \r\n            let copyOf = instantiate(this.prefab)\r\n            let cfwa=copyOf.getComponent(FractwithAssembler)\r\n            cfwa.prefab= this.prefab;\r\n            cfwa.recursiveness = this.recursiveness;\r\n            copyOf.parent = this.node.parent;\r\n            copyOf.getComponent(PolygonCollider2D).points = parts[1];\r\n            copyOf.getComponent(FracturableAssembler).setPoints(parts[1])\r\n            copyOf.setRotation(this.node.getRotation());\r\n            copyOf.setPosition(new Vec3(this.node.position.x, this.node.position.y));\r\n      \r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        let otherFracturable = otherCollider.getComponent(FractwithAssembler);\r\n       // if (otherCollider.node.name == \"Stomper\") {\r\n       console.log(\"collision\")\r\n       console.log(\"THIS AREA: \"+this.area)\r\n  \r\n        if((otherCollider.node.name == \"Stomper\" || this.recursiveness>0 && otherCollider.node.getComponent(FractwithAssembler)!=null) && this.area>this.minArea) {\r\n\r\n            var inverseWorldMatrix = new Mat4();\r\n            Mat4.invert(inverseWorldMatrix, this.node.getWorldMatrix());\r\n            let localContactPoint = contact.getWorldManifold().points[0].transformMat4(inverseWorldMatrix);\r\n            let normalContactPoint = contact.getManifold().localNormal\r\n            let fractureObj:MaskSplitter.Fracture = new MaskSplitter.Fracture(localContactPoint, normalContactPoint,this.node.getComponent(PolygonCollider2D).points)\r\n            let fracturePoints = MaskSplitter.getFracturable(fractureObj);\r\n            console.log(fracturePoints)\r\n            console.log(\"-----\")\r\n            if (fracturePoints != null && fracturePoints.length > 1) {\r\n              console.log(\"BEAM ICON\")\r\n                \r\n                this.createCopy(fractureObj);\r\n            }\r\n        } \r\n\r\n    }\r\n    onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}
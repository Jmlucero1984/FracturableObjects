// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        texture1: { value: white }
}%

CCProgram vs %{
  precision mediump float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;

  in vec4 a_color;
  out vec4 v_color;

  in float a_dist;
  
  out float v_dist;
 
  in float a_long;
 
   out vec2 uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position[0],a_position[1],0, 1);
    pos = cc_matViewProj * cc_matWorld * pos;

    v_color = a_color;
    v_dist = a_dist;
   uv0 = vec2(a_position[2],a_dist);

    return pos;
  }
}%

CCProgram fs %{
  #pragma extension([GL_OES_standard_derivatives, __VERSION__ < 300])

  precision mediump float;
  #include <embedded-alpha>
   #include <builtin/uniforms/cc-global> 

  in vec4 v_color;
  in float v_dist;
  in vec2 uv0;
  uniform sampler2D texture1;
    uniform CustomMove {
    vec2 mults;
};

  vec4 frag () {
    vec4 o = v_color;

    #if __VERSION__ < 300
      #ifdef GL_OES_standard_derivatives
        float aa = fwidth(v_dist);
      #else
        float aa = 0.05;
      #endif
    #else
      float aa = fwidth(v_dist);
    #endif
    //读取纹理
   // vec2 uv0 = vec2(o[0],o[1]);
    o = vec4(uv0[0],uv0[1],0.0,1.0);
    o *= CCSampleWithAlphaSeparated(texture1,uv0);

    return o;
  }
}%